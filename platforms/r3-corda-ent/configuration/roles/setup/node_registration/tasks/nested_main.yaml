# This task creates the value file for the node registration as well the db required and push them to the git repository

# Check if the node-registration is already completed
- name: Check if the node-registration is already completed
  shell: |
    vault kv get -format=yaml secret/{{ org.name | lower }}/{{ peer.name | lower }}/certs/truststore
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: node_certs
  ignore_errors: yes

# Create value file for the db required alongside node registration
- name: "Create value file of db for node registration"
  include_role:
    name: helm_component
  vars:
    component_name: "{{ peer.name | lower }}db"
    type: "db"
    values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
    name: "{{ org.name | lower }}"
    charts_dir: "{{ org.gitops.chart_source }}"
    git_url: "{{ org.gitops.git_ssh }}"
    git_branch: "{{ org.gitops.branch }}"
    node_name: "{{ peer.name | lower }}"
    image_pull_secret: "regcred"
    storageclass: "cordaentsc"
    container_name: "index.docker.io/hyperledgerlabs/h2:2018"
    tcp_port: "{{ peer.dbtcp.port }}"
    tcp_targetport: "{{ peer.dbtcp.targetPort }}"
    web_port: "{{ peer.dbweb.port }}"
    web_targetport: "{{ peer.dbweb.targetPort }}"
    helm_lint: "true"

- name: "Create value file for node registration"
  include_role:
    name: helm_component
  vars:
    helm_lint: "true"
    git_url: "{{ org.gitops.git_ssh }}"
    git_branch: "{{ org.gitops.branch }}"
    charts_dir: "{{ org.gitops.chart_source }}"
    component_name: "{{ peer.name | lower }}registration"
    node_name: "{{ peer.name | lower }}"
    values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
    name: "{{ org.name | lower }}"
    corda_service_version: node
    image_pull_secret: regcred
    type: node_registration
    doorman_url: "{{ network | json_query('orderers[?type==`idman`].uri') | first }}"
    networkmap_url: "{{ network | json_query('orderers[?type==`networkmap`].uri') | first }}"
  when: node_certs.failed

# Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    GIT_REPO: "{{ org.gitops.git_push_url }}"
    GIT_USERNAME: "{{ org.gitops.username }}"
    GIT_EMAIL: "{{ org.gitops.email }}"
    GIT_PASSWORD: "{{ org.gitops.password }}"
    GIT_BRANCH: "{{ org.gitops.branch }}"
    GIT_RESET_PATH: "platforms/r3-corda-ent/configuration"
    msg: "[ci skip] Pushing node registartion and its db files"

# Wait for the node initial registration job to complete
- name: "waiting for node initial registration job to complete"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Job"
    namespace: "{{ component_ns }}"
    component_name: "{{ peer.name }}-registration"
    kubernetes: "{{ org.k8s }}"
  when: node_certs.failed
