---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cenm.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app: "{{ .Release.Name }}"
    app.kubernetes.io/name: pre-install-hook
    app.kubernetes.io/component: certgen
    app.kubernetes.io/part-of: {{ include "cenm.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}"
        app.kubernetes.io/name: pre-install-hook
        app.kubernetes.io/component: certgen
        app.kubernetes.io/part-of: {{ include "cenm.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      restartPolicy: "OnFailure"
      containers:
        - name: cenm-pki
          image: {{ .Values.image.pki.repository }}:{{ .Values.image.pki.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: generated-config
              mountPath: /home
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
            - name: openssl-conf
              mountPath: /home/openssl.conf
              subPath: openssl.conf
        {{- if (eq .Values.global.vault.type "hashicorp") }}
          env:
          - name: VAULT_ADDR
            value: "{{ .Values.global.vault.address }}"
          - name: VAULT_SECRET_ENGINE
            value: "{{ .Values.global.vault.secretEngine }}"
          - name: VAULT_SECRET_PREFIX
            value: "{{ .Values.global.vault.secretPrefix }}"
          - name: KUBERNETES_AUTH_PATH
            value: "{{ .Values.global.vault.authPath }}"
          - name: VAULT_APP_ROLE
            value: "{{ .Values.global.vault.role }}"
          - name: VAULT_TYPE
            value: "{{ .Values.global.vault.type }}"
        {{- end }}
          command:
            - /bin/bash
            - -c
          args:
            - |
{{- if (eq .Values.global.vault.type "hashicorp") }}
              . /scripts/bevel-vault.sh
              echo "Getting vault Token..."
              vaultBevelFunc "init"
              #Read if secret exists in Vault
              vaultBevelFunc 'readJson' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/cenm-certs"
              function safeWriteSecret {
                key=$1
                fpath=$2
                if [ "$SECRETS_AVAILABLE" == "yes" ]
                then
                  # Get secret from Vault and create the k8s secret if it does not exist
                  kubectl get secret ${key}-certs --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                  if [ $? -ne 0 ]; then
                    CORDA_SSL_IDENTITY_MANAGER_KEYS=$(echo ${VAULT_SECRET} | jq -r '.["idmansslkeys_base64"]')
                    CORDA_SSL_NETWORK_MAP_KEYS=$(echo ${VAULT_SECRET} | jq -r '.["nmssslkeys_base64"]')
                    CORDA_SSL_AUTH_KEYS=$(echo ${VAULT_SECRET} | jq -r '.["authsslkeys_base64"]')
                    CORDA_SSL_ROOT_KEYS=$(echo ${VAULT_SECRET} | jq -r '.["rootsslkeys_base64"]')
                    CORDA_SSL_TRUSTSTORE=$(echo ${VAULT_SECRET} | jq -r '.["ssltrustore_base64"]')
                    NETWORK_ROOT_TRUSTSTORE=$(echo ${VAULT_SECRET} | jq -r '.["nmstruststore_base64"]')
                    CORDA_SSL_SIGNER_KEYS=$(echo ${VAULT_SECRET} | jq -r '.["signerkeys_base64"]')
                    IDENTITY_MANAGER_KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["idmankeystore_base64"]')
                    NETWORK_MAP_KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["nmskeystore_base64"]')
                    TLS_CRL=$(echo ${VAULT_SECRET} | jq -r '.["tlscrl_base64"]')
                    ROOT_CRL=$(echo ${VAULT_SECRET} | jq -r '.["rootcrl_base64"]')
                    SUBORDINATE_CRL=$(echo ${VAULT_SECRET} | jq -r '.["subordinatecrl_base64"]')
                    
                    echo "creating tmp files for the cert"
                    echo $CORDA_SSL_IDENTITY_MANAGER_KEYS | base64 -d > /tmp/corda-ssl-identity-manager-keys.jks
                    echo $CORDA_SSL_NETWORK_MAP_KEYS | base64 -d > /tmp/corda-ssl-network-map-keys.jks
                    echo $CORDA_SSL_AUTH_KEYS | base64 -d > /tmp/corda-ssl-auth-keys.jks 
                    echo $CORDA_SSL_ROOT_KEYS | base64 -d > /tmp/corda-ssl-root-keys.jks
                    echo $CORDA_SSL_TRUSTSTORE | base64 -d > /tmp/corda-ssl-trust-store.jks 
                    echo $NETWORK_ROOT_TRUSTSTORE | base64 -d > /tmp/network-root-truststore.jks  
                    echo $CORDA_SSL_SIGNER_KEYS | base64 -d > /tmp/corda-ssl-signer-keys.jks
                    echo $IDENTITY_MANAGER_KEYSTORE | base64 -d > /tmp/identity-manager-key-store.jks
                    echo $NETWORK_MAP_KEYSTORE | base64 -d > /tmp/network-map-key-store.jks
                    echo $TLS_CRL | base64 -d > /tmp/tls.crl
                    echo $ROOT_CRL | base64 -d > /tmp/root.crl
                    echo $SUBORDINATE_CRL | base64 -d > /tmp/subordinate.crl
                    
                    echo "creating kubernetes secrets.."
                    kubectl create secret generic ${key}-certs --namespace {{ .Release.Namespace }} \
                      --from-file=corda-ssl-identity-manager-keys.jks=/tmp/corda-ssl-identity-manager-keys.jks \
                      --from-file=corda-ssl-network-map-keys.jks=/tmp/corda-ssl-network-map-keys.jks \
                      --from-file=corda-ssl-auth-keys.jks=/tmp/corda-ssl-auth-keys.jks \
                      --from-file=corda-ssl-root-keys.jks=/tmp/corda-ssl-root-keys.jks \
                      --from-file=corda-ssl-trust-store.jks=/tmp/corda-ssl-trust-store.jks \
                      --from-file=network-root-truststore.jks=/tmp/network-root-truststore.jks \
                      --from-file=corda-ssl-signer-keys.jks=/tmp/corda-ssl-signer-keys.jks \
                      --from-file=identity-manager-key-store.jks=/tmp/identity-manager-key-store.jks \
                      --from-file=network-map-key-store.jks=/tmp/network-map-key-store.jks \
                      --from-file=tls.crl=/tmp/tls.crl \
                      --from-file=root.crl=/tmp/root.crl \
                      --from-file=subordinate.crl=/tmp/subordinate.crl
                  fi
                else
                  # Save Certs to Vault
                  # Use -w0 to get single line base64 -w0
                  CORDA_SSL_IDENTITY_MANAGER_KEYS=$(cat ${fpath}/idman/certs/corda-ssl-identity-manager-keys.jks | base64 -w0)
                  CORDA_SSL_NETWORK_MAP_KEYS=$(cat ${fpath}/networkmap/corda-ssl-network-map-keys.jks | base64 -w0)
                  CORDA_SSL_AUTH_KEYS=$(cat ${fpath}/root/corda-ssl-auth-keys.jks | base64 -w0)
                  CORDA_SSL_ROOT_KEYS=$(cat ${fpath}/root/corda-ssl-root-keys.jks | base64 -w0)
                  CORDA_SSL_TRUSTSTORE=$(cat ${fpath}/root/corda-ssl-trust-store.jks | base64 -w0)
                  NETWORK_ROOT_TRUSTSTORE=$(cat ${fpath}/root/network-root-truststore.jks | base64 -w0)
                  CORDA_SSL_SIGNER_KEYS=$(cat ${fpath}/signer/corda-ssl-signer-keys.jks| base64 -w0)
                  IDENTITY_MANAGER_KEYSTORE=$(cat ${fpath}/signer/identity-manager-key-store.jks  | base64 -w0)
                  NETWORK_MAP_KEYSTORE=$(cat ${fpath}/signer/network-map-key-store.jks | base64 -w0)
                  TLS_CRL=$(cat ${fpath}/idman/crls/tls.crl | base64 -w0)
                  ROOT_CRL=$(cat ${fpath}/idman/crls/root.crl | base64 -w0)
                  SUBORDINATE_CRL=$(cat ${fpath}/idman/crls/subordinate.crl | base64 -w0)
                  # create a JSON file for the data related to node crypto
                  echo "
                  {
                    \"data\":
                      {
                        \"idmansslkeys_base64\": \"${CORDA_SSL_IDENTITY_MANAGER_KEYS}\",
                        \"nmssslkeys_base64\": \"${CORDA_SSL_NETWORK_MAP_KEYS}\",
                        \"authsslkeys_base64\": \"${CORDA_SSL_AUTH_KEYS}\",
                        \"rootsslkeys_base64\": \"${CORDA_SSL_ROOT_KEYS}\",
                        \"ssltrustore_base64\": \"${CORDA_SSL_TRUSTSTORE}\",
                        \"nmstruststore_base64\": \"${NETWORK_ROOT_TRUSTSTORE}\",
                        \"signerkeys_base64\": \"${CORDA_SSL_SIGNER_KEYS}\",
                        \"idmankeystore_base64\": \"${IDENTITY_MANAGER_KEYSTORE}\",
                        \"nmskeystore_base64\": \"${NETWORK_MAP_KEYSTORE}\",
                        \"tlscrl_base64\": \"${TLS_CRL}\",
                        \"rootcrl_base64\": \"${ROOT_CRL}\",
                        \"subordinatecrl_base64\": \"${SUBORDINATE_CRL}\"
                      }
                  }" > payload.json
                  vaultBevelFunc 'write' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${key}-certs" 'payload.json'
                  rm payload.json
                  # Also create the k8s secret
                  kubectl create secret generic ${key}-certs --namespace {{ .Release.Namespace }} \
                      --from-file=corda-ssl-identity-manager-keys.jks=${fpath}/idman/certs/corda-ssl-identity-manager-keys.jks \
                      --from-file=corda-ssl-network-map-keys.jks=${fpath}/networkmap/corda-ssl-network-map-keys.jks \
                      --from-file=corda-ssl-auth-keys.jks=${fpath}/root/corda-ssl-auth-keys.jks \
                      --from-file=corda-ssl-root-keys.jks=${fpath}/root/corda-ssl-root-keys.jks \
                      --from-file=corda-ssl-trust-store.jks=${fpath}/root/corda-ssl-trust-store.jks \
                      --from-file=network-root-truststore.jks=${fpath}/root/network-root-truststore.jks \
                      --from-file=corda-ssl-signer-keys.jks=${fpath}/signer/corda-ssl-signer-keys.jks \
                      --from-file=identity-manager-key-store.jks=${fpath}/signer/identity-manager-key-store.jks \
                      --from-file=network-map-key-store.jks=${fpath}/signer/network-map-key-store.jks \
                      --from-file=tls.crl=${fpath}/idman/crls/tls.crl \
                      --from-file=root.crl=${fpath}/idman/crls/root.crl \
                      --from-file=subordinate.crl=${fpath}/idman/crls/subordinate.crl
                fi
              }
{{- else }}
              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl get secret ${key}-certs --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  kubectl create secret generic ${key}-certs --namespace {{ .Release.Namespace }} \
                    --from-file=corda-ssl-identity-manager-keys.jks=${fpath}/idman/certs/corda-ssl-identity-manager-keys.jks \
                    --from-file=corda-ssl-network-map-keys.jks=${fpath}/networkmap/corda-ssl-network-map-keys.jks \
                    --from-file=corda-ssl-auth-keys.jks=${fpath}/root/corda-ssl-auth-keys.jks \
                    --from-file=corda-ssl-root-keys.jks=${fpath}/root/corda-ssl-root-keys.jks \
                    --from-file=corda-ssl-trust-store.jks=${fpath}/root/corda-ssl-trust-store.jks \
                    --from-file=network-root-truststore.jks=${fpath}/root/network-root-truststore.jks \
                    --from-file=corda-ssl-signer-keys.jks=${fpath}/signer/corda-ssl-signer-keys.jks \
                    --from-file=identity-manager-key-store.jks=${fpath}/signer/identity-manager-key-store.jks \
                    --from-file=network-map-key-store.jks=${fpath}/signer/network-map-key-store.jks \
                    --from-file=tls.crl=${fpath}/idman/crls/tls.crl \
                    --from-file=root.crl=${fpath}/idman/crls/root.crl \
                    --from-file=subordinate.crl=${fpath}/idman/crls/subordinate.crl
                fi
              }
{{- end }}
              if [ "$SECRETS_AVAILABLE" == "yes" ]
              then
                echo "Certificates found for {{ .Release.Name }} ..."
              else
                echo "Creating certificates for {{ .Release.Name }} ..."
                echo 'keyStores = {
                  "identity-manager-key-store" = {
                      type = LOCAL
                      file = "./DATA/signer/identity-manager-key-store.jks"
                      password = "password"
                  }
                  "network-map-key-store" = {
                      type = LOCAL
                      file = "./DATA/signer/network-map-key-store.jks"
                      password = "password"
                  }
                  "subordinate-key-store" = {
                      type = LOCAL
                      file = "./DATA/root/subordinate-key-store.jks"
                      password = "password"
                  }
                  "root-key-store" = {
                      type = LOCAL
                      file = "./DATA/root/root-key-store.jks"
                      password = "password"
                  }
                  "tls-crl-signer-key-store" = {
                      type = LOCAL
                      file = "./DATA/root/tls-crl-signer-key-store.jks"
                      password = "password"
                  }
                  "corda-ssl-network-map-keys" = {
                      type = LOCAL
                      file = "./DATA/networkmap/corda-ssl-network-map-keys.jks"
                      password = "password"
                  },
                  "corda-ssl-identity-manager-keys" = {
                      type = LOCAL
                      file = "./DATA/idman/certs/corda-ssl-identity-manager-keys.jks"
                      password = "password"
                  },
                  "corda-ssl-signer-keys" = {
                      type = LOCAL
                      file = "./DATA/signer/corda-ssl-signer-keys.jks"
                      password = "password"
                  },
                  "corda-ssl-auth-keys" = {
                      type = LOCAL
                      file = "./DATA/root/corda-ssl-auth-keys.jks"
                      password = "password"
                  },
                  "corda-ssl-root-keys" = {
                      type = LOCAL
                      file = "./DATA/root/corda-ssl-root-keys.jks"
                      password = "password"
                  }  
                }
                certificatesStores = {
                    "network-root-trust-store" = {
                        file = "./DATA/root/network-root-truststore.jks"
                        password = "password"
                    }
                    "corda-ssl-trust-store" = {
                        file = "./DATA/root/corda-ssl-trust-store.jks"
                        password = "password"
                    }
                }
                certificates = {
                    "tlscrlsigner" = {
                        key = {
                            type = LOCAL
                            includeIn = ["tls-crl-signer-key-store"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        isSelfSigned = true
                        keyUsages = [CRL_SIGN]
                        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                        validDays = 7300
                        issuesCertificates = true
                        subject = {{ .Values.subjects.tlscrlsigner | quote }}
                        includeIn = ["network-root-trust-store"]
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/tls"
                            indirectIssuer = true
                            issuer = {{ .Values.subjects.tlscrlissuer | quote }}
                            file = "./DATA/idman/crls/tls.crl"
                        }
                    },
                    "cordarootca" = {
                        key = {
                            type = LOCAL
                            includeIn = ["root-key-store"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        isSelfSigned = true
                        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                        validDays = 7300
                        issuesCertificates = true
                        subject = {{ .Values.subjects.rootca | quote }}
                        includeIn = ["network-root-trust-store"]
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/root"
                            file = "./DATA/idman/crls/root.crl"
                        }
                    },
                    "subordinateca" = {
                        key = {
                            type = LOCAL
                            includeIn = ["subordinate-key-store"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        isSelfSigned = false
                        signedBy = "cordarootca"
                        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                        validDays = 7300
                        issuesCertificates = true
                        subject = {{ .Values.subjects.subordinateca | quote }}
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/subordinate"
                            file = "./DATA/idman/crls/subordinate.crl"
                        }
                    },
                    "cordaidentitymanagerca" = {
                        key = {
                            type = LOCAL
                            includeIn = ["identity-manager-key-store"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        isSelfSigned = false
                        signedBy = "subordinateca"
                        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                        validDays = 7300
                        role = DOORMAN_CA
                        issuesCertificates = true
                        includeIn = ["network-root-trust-store"]
                        subject = {{ .Values.subjects.idmanca | quote }}
                    },
                    "cordanetworkmap" = {
                        key = {
                            type = LOCAL
                            includeIn = ["network-map-key-store","identity-manager-key-store"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        isSelfSigned = false
                        signedBy = "subordinateca"
                        keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                        keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                        validDays = 7300
                        role = NETWORK_MAP
                        issuesCertificates = false
                        subject = {{ .Values.subjects.networkmap | quote }}
                    },
                    "::CORDA_SSL_ROOT" {
                        key = {
                            type = LOCAL
                            includeIn = ["corda-ssl-root-keys"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/ssl"
                            file = "./DATA/root/crls/ssl.crl"
                        }
                    },
                    "::CORDA_SSL_IDENTITY_MANAGER" {
                        key = {
                            type = LOCAL
                            includeIn = ["corda-ssl-identity-manager-keys"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/ssl"
                            file = "./DATA/idman/crls/ssl.crl"
                        }
                    },
                    "::CORDA_SSL_NETWORK_MAP" {
                        key = {
                            type = LOCAL
                            includeIn = ["corda-ssl-network-map-keys"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/ssl"
                            file = "./DATA/networkmap/crls/ssl.crl"
                        }
                    },
                    "::CORDA_SSL_SIGNER" {
                        key = {
                            type = LOCAL
                            includeIn = ["corda-ssl-signer-keys"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/ssl"
                            file = "./DATA/signer/crls/ssl.crl"
                        }
                    },
                    "::CORDA_SSL_AUTH_SERVICE" {
                        key = {
                            type = LOCAL
                            includeIn = ["corda-ssl-auth-keys"]
                            algorithm = "ECDSA_SECP256R1_SHA256"
                            password = "password"
                        }
                        crl = {
                            crlDistributionUrl = "{{ include "identityManager.URL" . }}/certificate-revocation-list/ssl"
                            file = "./DATA/root/crls/ssl.crl"
                        }
                    }   
                }' >> pki.conf
                time java -Xmx256M -jar bin/pkitool.jar --config-file pki.conf
              fi;
              # TODO: Move these to pki image
              apt install curl
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.27.0/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mv ./kubectl /usr/local/bin

              echo "Creating cenm-certs secrets in k8s ..."
{{- if and (ne .Values.global.cluster.provider "minikube") (.Values.global.cluster.cloudNativeServices) }}
              echo "Implement cloud native service methods"
{{- else }}
              safeWriteSecret cenm /opt/cenm/DATA
{{- end }}
              echo "Completed ..."
      volumes:
      - name: generated-config
        emptyDir: {}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
          defaultMode: 0777
      - name: openssl-conf
        configMap:
          name: openssl-conf
