shell = {
    sshdPort = {{ .Values.service.ssh.port }}
    user = "{{ .Values.service.shell.user }}"
    password = "{{ .Values.service.shell.password }}"
}

#############################################
# All individual keys used in signing tasks #
#############################################
signingKeys = {
    "cordaidentitymanagerca" = {
        alias = "identitymanagerca"
        type = LOCAL
        password = "password"
        keyStore {
            file = "./DATA/signer/identity-manager-key-store.jks"
            password = "password"
        }
    },
    "cordanetworkmap" = {
        alias = "networkmap"
        type = LOCAL
        password = "password"
        keyStore {
            file = "./DATA/signer/network-map-key-store.jks"
            password = "password"
        }
    }
}

##########################################################
# All ENM service endpoints for fetching/persisting data #
##########################################################
serviceLocations = {
    "identity-manager" = {
        host = {{ .Values.serviceLocations.identityManager.host }}
        port = {{ .Values.serviceLocations.identityManager.port }}
        ssl = {
            keyStore = {
                location = "./DATA/signer/corda-ssl-signer-keys.jks"
                password = password
            }
            trustStore = {
                location = "./DATA/root/corda-ssl-trust-store.jks"
                password = password
            }
            validate = true
        }
    },
    "network-map" = {
        host = {{ .Values.serviceLocations.networkMap.host }}
        port = {{ .Values.serviceLocations.networkMap.port }}
        ssl = {
            keyStore = {
                location = "./DATA/signer/corda-ssl-signer-keys.jks"
                password = password
            }
            trustStore = {
                location = "./DATA/root/corda-ssl-trust-store.jks"
                password = password
            }
            validate = true
        }
    },
    "revocation" = {
        host = {{ .Values.serviceLocations.identityManager.host }}
        port = {{ .Values.serviceLocations.revocation.port }}
        ssl = {
            keyStore = {
                location = "./DATA/signer/corda-ssl-signer-keys.jks"
                password = password
            }
            trustStore = {
                location = "./DATA/root/corda-ssl-trust-store.jks"
                password = password
            }
            validate = true
        }
    }
}

###################################################
# Signing tasks to be run (manually or scheduled) #
###################################################
signers = {
    "CSR" = {
        type = CSR
        signingKeyAlias = "cordaidentitymanagerca"
        serviceLocationAlias = "identity-manager"
        crlDistributionPoint = "https://{{ .Values.serviceLocations.identityManager.publicIp }}:{{ .Values.serviceLocations.identityManager.publicPort }}/certificate-revocation-list/doorman"
        validDays = 7300 # 20 year certificate expiry
        schedule {
            interval = {{ .Values.signers.CSR.schedule.interval }}
        }
    },
    "CRL" = {
        type = CRL
        signingKeyAlias = "cordaidentitymanagerca"
        serviceLocationAlias = "revocation"
        crlDistributionPoint = "https://{{ .Values.serviceLocations.identityManager.publicIp }}:{{ .Values.serviceLocations.identityManager.publicPort }}/certificate-revocation-list/doorman"
        # updatePeriod = 86400000 # 1 day CRL expiry
        updatePeriod = 604800000 # 1 week CRL expiry
        schedule {
            interval = {{ .Values.signers.CRL.schedule.interval }}
        }
    },
    "NetworkMap" = {
        type = NETWORK_MAP
        signingKeyAlias = "cordanetworkmap"
        serviceLocationAlias = "network-map"
        schedule {
            interval = {{ .Values.signers.NetworkMap.schedule.interval }}
        }
    },
    "NetworkParameters" = {
        type = NETWORK_PARAMETERS
        signingKeyAlias = "cordanetworkmap"
        serviceLocationAlias = "network-map"
        schedule {
            interval = {{ .Values.signers.NetworkParameters.schedule.interval }}
        }
    }
}
