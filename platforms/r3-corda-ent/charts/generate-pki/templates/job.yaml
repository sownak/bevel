apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.nodeName }}-generate-pki
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ .Values.nodeName }}-generate-pki
    app.kubernetes.io/name: {{ .Values.nodeName }}-generate-pki
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ .Values.nodeName }}-generate-pki
          app.kubernetes.io/name: {{ .Values.nodeName }}-generate-pki
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceaccountname }}
        hostname: {{ .Values.nodeName }}
        securityContext:
          fsGroup: 1000
        containers:
        - name: pki
          image: "{{ required "signer[pki]: missing value for .Values.dockerImagePki.name" .Values.dockerImagePki.name }}:{{ required "signer[pki]: missing value for .Values.dockerImagePki.tag" .Values.dockerImagePki.tag }}"
          env:
            - name: ACCEPT_LICENSE
              value: {{ .Values.acceptLicense }}
          imagePullPolicy: {{ .Values.dockerImagePki.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            rm -r DATA/done.txt

            cp CM-FILES/pki.conf etc/pki.conf
            mkdir DATA/signer DATA/root DATA/networkmap DATA/idman DATA/idman/crls DATA/idman/certs
            time java -Xmx{{ .Values.cordaJarMx }}M -jar {{ .Values.jarPath }}/pkitool.jar --config-file {{ .Values.configPath }}/pki.conf

            #creating a dummy file to perform check if last line is executed or not.
            touch DATA/done.txt
          volumeMounts:
          - name: pkitool-certs-keys
            mountPath: /opt/corda/DATA
          - name: pkitool-etc
            mountPath: /opt/corda/etc
          - name: pkitool-conf
            mountPath: /opt/corda/CM-FILES/pki.conf
            subPath: pki.conf
          resources:
            requests:
              memory: {{ .Values.cordaJarMx }}M
            limits:
              memory: {{ add .Values.cordaJarMx 2 }}M
        - name: store-certs
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
             - name: VAULT_ADDR
               value: {{ $.Values.vault.address }}
             - name: KUBERNETES_AUTH_PATH
               value: {{ $.Values.vault.authpath }}
             - name: VAULT_APP_ROLE
               value: {{ $.Values.vault.role }}
             - name: BASE_DIR
               value: {{ $.Values.volume.baseDir }}
             - name: CERTS_SECRET_PREFIX
               value: {{ .Values.vault.certsecretprefix }}
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
              if echo ${2} | grep "errors"; then
                 echo "ERROR: unable to retrieve ${1}: ${2}"
                 exit 1
              fi
            }

            # setting up env to get secrets from vault
            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
            cd ${BASE_DIR}/DATA
            # putting certificate for cenm root 
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
            do
                if [ -e done.txt ]
                then
                  cd ${BASE_DIR}/DATA/root
                  echo "found root certificates, performing vault put for root path"
                  (echo '{'
                  for FILE in *;
                  do
                  echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                  done;
                  ) >> ../temp_root.json
                  sed -i '$ s/.$//' ../temp_root.json
                  echo '}' >> ../temp_root.json
                  cat ../temp_root.json | tr -d '\n' >> ../root.json
                  echo "before curl"
                  curl \
                   --header "X-Vault-Token: ${VAULT_TOKEN}" \
                   --request POST \
                   --data @../root.json \
                  ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs
                   echo "after curl"
                  break;
                else
                  echo "certificates are not ready, sleeping ..."
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                  COUNTER=`expr "$COUNTER" + 1`
                fi
            done
            cd ${BASE_DIR}/DATA
            # putting certificate for cenm signer
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
            do
                if [ -e done.txt ]
                then
                  cd ${BASE_DIR}/DATA/signer
                  echo "found signer certificates, performing vault put for signer path"
                  (echo '{'
                  for FILE in *;
                  do
                  echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                  done;
                  ) >> ../temp_signer.json
                  sed -i '$ s/.$//' ../temp_signer.json
                  echo '}' >> ../temp_signer.json
                  cat ../temp_signer.json | tr -d '\n' >> ../signer.json
                  echo "before curl"
                  curl \
                   --header "X-Vault-Token: ${VAULT_TOKEN}" \
                   --request POST \
                   --data @../signer.json \
                  ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.signerName }}/certs
                   echo "after curl"
                  break;
                else
                  echo "certificates are not ready, sleeping ..."
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                  COUNTER=`expr "$COUNTER" + 1`
                fi
            done

            # putting idman certificate for cenm idman
            cd ${BASE_DIR}/DATA
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
            do
                if [ -e done.txt ]
                then
                  cd ${BASE_DIR}/DATA/idman/crls
                  echo "found idman certificates, performing vault put for idman path"
                  (echo '{'
                  for FILE in *;
                  do
                  echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                  done;
                  ) >> ../temp_crl.json
                  sed -i '$ s/.$//' ../temp_crl.json
                  echo '}' >> ../temp_crl.json
                  cat ../temp_crl.json | tr -d '\n' >> ../crl.json
                  echo "before curl"
                  curl \
                   --header "X-Vault-Token: ${VAULT_TOKEN}" \
                   --request POST \
                   --data @../crl.json \
                  ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/crls
                  echo "After curl"

                  # putting certs for idman at certs path
                  (echo '{"corda-ssl-identity-manager-keys.jks": "'; base64 ${BASE_DIR}/DATA/idman/certs/corda-ssl-identity-manager-keys.jks; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/certs
                  # putting certs for networkmap at certs path
                  (echo '{"corda-ssl-network-map-keys.jks": "'; base64 ${BASE_DIR}/DATA/networkmap/corda-ssl-network-map-keys.jks; echo '"}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.networkmapName }}/certs
                  break;
                else
                  echo "certificates are not ready, sleeping ..."
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                  COUNTER=`expr "$COUNTER" + 1`
                fi
            done
            if [ "$COUNTER" -gt {{ $.Values.healthcheck.readinessthreshold }} ]
            then
                echo "Retry attempted $COUNTER times, no files found. Giving up!"
                exit 1
                break
            fi
            echo "completed"
          volumeMounts:
          - name: pkitool-certs-keys
            mountPath: /opt/corda/DATA
            readOnly: false
        imagePullSecrets:
          - name: {{ .Values.image.imagePullSecret }}
        volumes:
          - name: pkitool-conf
            configMap:
              name: {{ .Values.nodeName }}-pkitool-conf
          - name: pkitool-etc
            emptyDir:
              medium: Memory
          - name: pkitool-certs-keys
            emptyDir:
              medium: Memory
