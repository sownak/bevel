##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook adds a new peer to an exisitng organization in an existing Fabric DLT network
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook add-peer.yaml -e "@/path/to/network.yaml" -e "add_new_org='false'" -e "add_peer='true'"
############################################################################################
# Please ensure that the ../../shared/configuration playbooks have been run and a DLT network exists.
# Please ensure the orderer certificates are placed on the paths mentioned in orderer.certificate in network.yaml
---
# This will apply to ansible_provisioners. /etc/ansible/hosts should be configured with this group
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:

  # delete build directory
  - name: Remove build directory
    file:
      path: "./build"
      state: absent
  # Create Namespaces and Vault-rbac kubernetes-value files for new organization
  - include_role:
      name: "create/namespace"
    vars:
      component_name: "{{ item.name | lower }}-net"
      component_type_name: "{{ item.type | lower }}"
      kubernetes: "{{ item.k8s }}"
      release_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
    loop: "{{ network['organizations'] }}"

  # Setup script for Vault and OS Package Manager
  - name: "Setup script for Vault and OS Package Manager"
    include_role:
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/scripts"
    vars:
      namespace: "{{ org.name | lower }}-net"
      network_type: "{{ network.type | lower }}"
      kubernetes: "{{ org.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.org_status == 'new'
  
  # Setup Vault-Kubernetes accesses and Regcred for docker registry for new organization
  - include_role: 
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/vault_kubernetes"
    vars:
      name: "{{ org.name | lower }}"
      component_name: "{{ org.name | lower }}-vaultk8s-job"
      component_type: "{{ org.type | lower }}"
      component_ns: "{{ org.name | lower }}-net"
      component_auth: "{{ network.env.type }}{{ org.name | lower }}-net-auth"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      policy_type: "fabric"
      gitops: "{{ org.gitops }}"
      reset_path: "platforms/hyperledger-fabric/configuration"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.org_status == 'new'
  
  # Create Storageclass for new organization
  - include_role:
      name: "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/setup/storageclass"  
    vars:
      org_name: "{{ org.name | lower }}"
      cloudProvider: "{{ org.cloud_provider | lower }}"
      sc_name: "{{ org_name }}-{{ cloudProvider }}-storageclass"
      component_type: "{{ org.type | lower}}"
      region: "{{ org.k8s.region | default('eu-west-1') }}"
      kubernetes: "{{ org.k8s }}"
      platform_suffix: "net"
      charts_dir: "platforms/shared/charts"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    
  # Create Organization crypto materials for new organization
  - include_role:
      name: "create/ca_tools/peer"
    vars:
      component_name: "{{ item.name | lower}}-net"
      component: "{{ item.name | lower}}"
      component_type: "{{ item.type | lower}}"
      component_services: "{{ item.services }}"
      orderer_org: "{{ item.orderer_org | lower }}"
      sc_name: "{{ component }}-{{ item.cloud_provider | lower }}-storageclass"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      ca: "{{ item.services.ca }}"
      docker_url: "{{ network.docker.url }}"
      gitops: "{{ item.gitops }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
    loop: "{{ network['organizations'] }}"
    when: item.type == 'peer'

  # This role fetches block 0 and joins peers of new organizaion to the channel
  - include_role:
      name: "create/new_peer/update_block"
    vars:
      build_path: "./build"
      participants: "{{ item.participants }}"
      docker_url: "{{ network.docker.url }}"      
    loop: "{{ network['channels'] }}"
 
  # This role creates the value file for peers of organisations and write couch db credentials
  # to the vault.
  - include_role:
      name: "create/peers"
    vars:
      build_path: "./build"
      namespace: "{{ item.name | lower}}-net"
      component_type: "{{ item.type | lower}}"
      component_services: "{{ item.services }}"
      vault: "{{ item.vault }}"
      git_protocol: "{{ item.gitops.git_protocol }}"
      git_url: "{{ item.gitops.git_url }}"
      git_branch: "{{ item.gitops.branch }}"
      docker_url: "{{ network.docker.url }}"
      charts_dir: "{{ item.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
    loop: "{{ network['organizations'] }}"
    when: item.type == 'peer'

  # This role fetches block 0 and joins peers of new organizaion to the channel
  - include_role:
      name: "create/channels_join"
    vars:
      build_path: "./build"
      participants: "{{ item.participants }}"
      docker_url: "{{ network.docker.url }}"
    loop: "{{ network['channels'] }}"

  # Create CLI pod for peers with cli option enabled
  - name: Create CLI pod for each peer when enabled
    include_role:
      name: "create/cli_pod"
    vars:
      peers: "{{ org.services.peers }}"
      docker_url: "{{ network.docker.url }}"
    loop: "{{ network.organizations }}"
    loop_control:
      loop_var: org
    when: org.type == "peer"

  vars: #These variables can be overriden from the command line
    privilege_escalate: false           #Default to NOT escalate to root privledges
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    bin_install_dir:  "~/bin"           #Default to /bin install directory for binaries
    add_new_org: 'false'                #Default for this playbook is false
    add_peer: 'true'                    #Default for this playbook is true
