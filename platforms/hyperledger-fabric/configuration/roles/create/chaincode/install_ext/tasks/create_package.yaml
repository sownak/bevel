# Create a temporary directory for packaging
- name: Creates temporary package folder
  file:
    state: directory
    path: "{{ package_dir }}"

# Copy the certificates used for the packaging to temp folder
- name: Copies the certificate to temp folder
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ org_ns }} | grep "ca-tools" | awk '{print $1}');
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ org_ns }}/${CA_TOOL_CLI}:crypto-config/peerOrganizations/{{ org_ns }}/users/{{ first_peer.name }}-{{ chaincode.name }}@{{ org_ns }}/tls {{ package_dir }};

# Pack the external chaincode details
- name: Generation chaincode connection details with mTLS
  shell: |
    cd {{ package_dir }}
    echo '{}' | jq --arg cc_addr "cc-{{ chaincode_name }}.{{ org_ns }}.svc.cluster.local:7052" \
      --arg c_key "$(cat ./client.key)" \
      --arg c_crt "$(cat ./client.crt)" \
      --arg ca_crt "$(cat ./ca.crt)" \
      '{"address": $cc_addr, "dial_timeout":"10s", "tls_required":true, "client_auth_required":true, "client_key":$c_key, "client_cert":$c_crt, "root_cert":$ca_crt}' > connection.json
    echo '{"path":"","type":"external","label":"'{{ package_name }}'"}' > metadata.json;
  when: chaincode.tls

# Pack the external chaincode details without tls
- name: Generation chaincode connection details without TLS
  shell: |
    CHAINCODE_ADDR=cc-{{ chaincode_name }}.{{ org_ns }}.svc.cluster.local:7052
    cd {{ package_dir }}
    echo '{"address":"'${CHAINCODE_ADDR}'","dial_timeout":"10s","tls_required":false,"client_auth_required":false,"client_key":"","client_cert":"","root_cert":""}' > connection.json
    echo '{"path":"","type":"external","label":"'{{ package_name }}'"}' > metadata.json
  when: not chaincode.tls

# Pack the chaincode details file
- name: Packs the chaicode package file
  shell: | 
    # Packages chaincode details
    cd {{ package_dir }}
    tar cfz code.tar.gz connection.json;
    tar cfz {{ package_name }}.tgz code.tar.gz metadata.json;

# Check the status of the package file
- name: Checks the status of the package file
  stat:
    path: "{{ package_dir }}/{{ package_name }}.tgz"
  register: packagefile

# Stop the playbook if the package details file exists
- name: Fails if the package file doesn't exist
  fail:
    msg: Package doesn't exist, please check the process
  when: 
    - packagefile is defined and packagefile.stat is defined and packagefile.stat.exists == false

# Save the package details to vault in base64 format
- name: Save the package file to vault in base64 format
  shell: |
    PACKAGE_VAULT_ADDR={{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ org_ns }}/chaincodes/{{ chaincode_name }}/package/v{{ chaincode.version }}
    vault kv put ${PACKAGE_VAULT_ADDR} package-base64="$(cat {{ package_dir }}/{{ package_name }}.tgz | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"

# Delete the packaging temp directory
- name: Delete the temp package directory
  file:
    path: "{{ package_dir }}"
    state: absent
  when: 
    - packagefile is defined and packagefile.stat is defined and packagefile.stat.exists == true
