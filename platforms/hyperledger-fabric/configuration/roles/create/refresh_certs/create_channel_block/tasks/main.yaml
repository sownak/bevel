##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Call nested_create_cli to generate the cli value files for the orderer organization
- name: Call nested_main for the each orderer
  include_tasks: nested_main.yaml
  loop: "{{ orderers }}"
  loop_control:
    loop_var: orderer_main
  when: refresh_cert is defined and refresh_cert == 'true'

# Call get_update_block to get the latest from syschannel channel block.
- name: Call get_update_block to get latest syschannel block
  include_tasks: get_update_block.yaml
  vars:
    channel_name: "{{ sys_channel_name }}"
    orderer: "{{ org.services.orderers | first }}"
    check: "latest_block"

# Call get_update_block to get the latest from appchannel channel block.
- name: Call get_update_block to get latest appchannel block
  include_tasks: get_update_block.yaml
  vars:
    channel_name: "{{ channel.channel_name | lower }}"
    orderer: "{{ org.services.orderers | first }}"
    check: "latest_block"
  loop: "{{ network.channels }}"
  loop_control:
    loop_var: channel

# Ensure channel-artifacts dir exists
- name: Ensure channel-artifacts dir exists
  file:
    path: "{{ build_path }}/channel-artifacts"
    state: directory

# Create the genesis block by consuming the latest config block
- name: "Create genesis block"
  shell: |
    cat {{ build_path }}/{{ sys_channel_name }}_config_block.pb | base64 > {{ build_path }}/channel-artifacts/{{ channel.channel_name | lower }}.genesis.block.base64

# Add new genesis block to the vault
- name: "Write genesis block to Vault"
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/crypto/ordererOrganizations/{{ component_ns }}/{{ channel.channel_name | lower }}  {{ network.env.type }}GenesisBlock="$(cat {{build_path}}/channel-artifacts/{{ channel.channel_name | lower }}.genesis.block.base64)"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"

# Delete the orderer cli
- name: "Delete all temp {{ orderer.name }}-{{ org.name }}-cli"
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} helm uninstall {{ orderer.name }}-{{ org.name }}-cli
  vars:
    orderer: "{{ org.services.orderers | first }}"
  loop: "{{ network.organizations }}"
  loop_control:
    loop_var: org
  when: org.type == 'orderer'
  ignore_errors: yes
