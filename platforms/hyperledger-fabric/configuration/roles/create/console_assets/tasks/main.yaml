##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role Create the assets which can be imported into fabric operations console
#############################################################################################

############################################################################################
# Create directory for CA json files
- name: Create CA directory if it does not exist
  file:
    path: "{{ build_path }}/Certificate_Authorities"
    state: directory

# Get CA info from public url
- name: Get CA data info
  uri:
    url: "https://{{ item.ca_data.url }}"
    validate_certs: no
    return_content: yes
  register: url_output

# Set the ca_info with the json output from above task
- name: Set ca_info variable
  set_fact:
    ca_info: "{{ url_output.json.result }}"
  when: not url_output.failed

# Create the json files for CA servers
- name: "Create json file for ca {{ component_name }}"
  template:
    src: "{{ templates[type] | default('helm_component.tpl') }}"
    dest: "{{ build_path }}/Certificate_Authorities/{{ component_name }}.json"
  vars:
    type: ca
    component_name: "{{ item.name | lower }}-ca"
  when: 
  - item.services.ca is defined
  - not url_output.failed

# Create directory for orderer json files
- name: Create Orderer directory if it does not exist
  file:
    path: "{{ build_path }}/Ordering_Services"
    state: directory

# Create the json files for Orderers
- name: "Create json file for orderer {{ component_name }}"
  template:
    src: "{{ templates[type] | default('helm_component.tpl') }}"
    dest: "{{ build_path }}/Ordering_Services/{{ component_name }}.json"
  vars:
    type: orderer
    component_name: "orderer-{{ item.name | lower }}-{{ orderer.name }}"
  loop: "{{ item.services.orderers }}"
  loop_control:
    loop_var: orderer
  when: 
  - item.type == 'orderer'
  - not url_output.failed

# Create directory for OrgMSP json files
- name: Create Org directory if it does not exist
  file:
    path: "{{ build_path }}/Organizations"
    state: directory

# Create the json files for OrgMSPs
- name: "Create json file for Org {{ component_name }}"
  template:
    src: "{{ templates[type] | default('helm_component.tpl') }}"
    dest: "{{ build_path }}/Organizations/{{ component_name }}.json"
  vars:
    type: org
    component_name: "{{ item.name | lower }}-msp"  
  when: 
  - not url_output.failed

# Create directory for Peer json files
- name: Create Peers directory if it does not exist
  file:
    path: "{{ build_path }}/Peers"
    state: directory

# Create the json files for Peers
- name: "Create json file for peer {{ component_name }}"
  template:
    src: "{{ templates[type] | default('helm_component.tpl') }}"
    dest: "{{ build_path }}/Peers/{{ component_name }}.json"
  vars:
    type: peer
    component_name: "{{ item.name | lower }}-{{ peer.name }}"
  loop: "{{ item.services.peers }}"
  loop_control:
    loop_var: peer
  when: 
  - item.type == 'peer'
  - not url_output.failed

# Zip everything for import
- name: Create zip file
  archive:
    path: "{{ build_path }}"      
    dest: "{{ build_path }}/../console_assets.zip"
    format: zip
