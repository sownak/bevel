##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.server.name }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app.kubernetes.io/name: {{ $.Values.server.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  annotations:
    {{- if $.Values.annotations }}
    {{- range $key, $value := $.Values.deployment.annotations }}
    {{- range $k, $v := $value }}
      {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }} 
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $.Values.server.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
  template:
    metadata:
      labels:
        name: {{ $.Values.server.name }}
        app.kubernetes.io/name: {{ $.Values.server.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}  
        app.kubernetes.io/instance: {{ .Release.Name }} 
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      {{- if .Values.vault.imagesecretname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      {{- end }}
      volumes:
      - name: ca-server-db
        persistentVolumeClaim:
          claimName: ca-server-db-pvc
      - name: certificates
        emptyDir:
          medium: Memory
      {{- if (not (empty .Values.server.configpath)) }}
      - name: {{ $.Values.server.name }}-config-volume
        configMap:
          name: {{ $.Values.server.name }}-config
          items:
            - key: fabric-ca-server-config.yaml
              path: fabric-ca-server-config.yaml
      {{- end }}        
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: "{{ .Values.vault.tls }}"
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{- end  }}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: ca-certs-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: MOUNT_PATH
          value: /secret
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          source /scripts/bevel-vault.sh

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          SECRET_CERT={{ $.Values.vault.secretcert }}
          vault_secret_key=$(echo ${SECRET_CERT} |awk -F "?" '{print $1}')
          vault_data_key=$(echo ${SECRET_CERT} |awk -F "?" '{print $2}')

          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${vault_secret_key}"
          VALUE_OF_SECRET=$(echo ${VAULT_SECRET} | jq -r ".[\"${vault_data_key}\"]")
          echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/server.crt

          SECRET_KEY={{ $.Values.vault.secretkey }}
          vault_secret_key=$(echo ${SECRET_KEY} |awk -F "?" '{print $1}')
          vault_data_key=$(echo ${SECRET_KEY} |awk -F "?" '{print $2}')

          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${vault_secret_key}"
          VALUE_OF_SECRET=$(echo ${VAULT_SECRET} | jq -r ".[\"${vault_data_key}\"]")
          echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/server.key

          SECRET_ADMIN_PASS={{ $.Values.vault.secretadminpass }}
          vault_secret_key=$(echo ${SECRET_ADMIN_PASS} |awk -F "?" '{print $1}')
          vault_data_key=$(echo ${SECRET_ADMIN_PASS} |awk -F "?" '{print $2}')

          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${vault_secret_key}"
          VALUE_OF_SECRET=$(echo ${VAULT_SECRET} | jq -r ".[\"${vault_data_key}\"]")
          echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/user_cred    
        volumeMounts:
        - name: certificates
          mountPath: /secret
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      containers:
      - name: ca
        image: {{ $.Values.metadata.images.ca }}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          if [[ -d /custom-config/ ]] && [[ -f /custom-config/fabric-ca-server-config.yaml ]]; then
            cp /custom-config/fabric-ca-server-config.yaml $FABRIC_CA_HOME/fabric-ca-server-config.yaml
            fabric-ca-server start --config $FABRIC_CA_HOME/fabric-ca-server-config.yaml -d
          else
            sleep 1 && fabric-ca-server start -b {{ $.Values.server.admin }}:`cat /etc/hyperledger/fabric-ca-server-config/user_cred` -d
          fi
        ports:
        - containerPort: 7054
        - containerPort: 9443
        env:
        - name: FABRIC_CA_HOME
          value: /etc/hyperledger/fabric-ca-server
        - name: FABRIC_CA_SERVER_CA_NAME
          value: "{{ $.Values.server.name }}.{{ $.Values.metadata.namespace }}"
        - name: FABRIC_CA_SERVER_CA_CERTFILE
          value:  /etc/hyperledger/fabric-ca-server-config/server.crt
        - name: FABRIC_CA_SERVER_CA_KEYFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.key
        - name: FABRIC_CA_SERVER_TLS_ENABLED
          value: "{{ $.Values.server.tlsstatus }}"
        - name: FABRIC_CA_SERVER_DEBUG
          value: "true"
        - name: FABRIC_CA_SERVER_TLS_CERTFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.crt
        - name: FABRIC_CA_SERVER_TLS_KEYFILE
          value: /etc/hyperledger/fabric-ca-server-config/server.key
        - name: FABRIC_CA_SERVER_DB_DATASOURCE
          value: /var/hyperledger/fabric-ca-server/db/fabric-ca-server.db
        - name: FABRIC_CA_SERVER_OPERATIONS_LISTENADDRESS
          value: 0.0.0.0:9443
        volumeMounts:
        - name: certificates
          mountPath: /etc/hyperledger/fabric-ca-server-config
          readOnly: true
        - name: ca-server-db
          mountPath: /var/hyperledger/fabric-ca-server/db/
        {{- if (not (empty .Values.server.configpath)) }}
        - name: {{ $.Values.server.name }}-config-volume
          mountPath: /custom-config/
        {{- end }}
