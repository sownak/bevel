##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
{{- if and (eq .Values.peer.type "anchor") (not .Values.peer.addPeerValue) (not .Values.peer.addnewOrgValue) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: anchorpeer-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/name: anchorpeer-{{ .Release.Name }}
    app.kubernetes.io/component: fabric-anchorpeer-job
    app.kubernetes.io/part-of: anchorpeer-{{ .Release.Name }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: anchorpeer-{{ .Release.Name }}
        app.kubernetes.io/component: fabric-anchorpeer-job
        app.kubernetes.io/part-of: anchorpeer-{{ .Release.Name }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: "OnFailure"
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      volumes:
      {{ if .Values.global.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ .Values.global.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt  # curl expects certs to be in /etc/ssl/certs/ca-certificates.crt
      {{ end }}
      - name: certificates
        emptyDir:
          medium: Memory
      - name: orderer-tls-cacert
        configMap:
          name: {{ include "fabric-channel-join.orderercrt" . }}
          defaultMode: 0775
          items:
            - key: cacert
              path: orderer.crt
      {{- if ne (.Values.global.version | trunc 3) "2.5" }}
      - name: anchorpeer-artifacts
        configMap:
          name: {{ .Release.Name }}-anchor-artifacts
      {{- end }}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: certificates-init
        image: {{ .Values.image.alpineUtils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.global.vault.address }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.global.vault.role }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.global.vault.authPath }}
        - name: VAULT_SECRET_ENGINE
          value: "{{ .Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ .Values.global.vault.secretPrefix }}"
        - name: VAULT_TYPE
          value: "{{ .Values.global.vault.type }}"
        - name: MOUNT_PATH
          value: /secret
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
{{- if eq .Values.global.vault.type "hashicorp" }}

          . /scripts/bevel-vault.sh
          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          function getAdminMspSecret {
            KEY=$1

            echo "Getting MSP certificates from Vault."
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/users/${KEY}"

            ADMINCERT=$(echo ${VAULT_SECRET} | jq -r '.["admincerts"]')
            CACERTS=$(echo ${VAULT_SECRET} | jq -r '.["cacerts"]')
            KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
            SIGNCERTS=$(echo ${VAULT_SECRET} | jq -r '.["signcerts"]')
            TLSCACERTS=$(echo ${VAULT_SECRET} | jq -r '.["tlscacerts"]')

            echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
            echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
            echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
            echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
            echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt
          }

{{- else }}

          function getAdminMspSecret {
            KEY=$1
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)

            ADMINCERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.admincerts'  | base64 -d)
            CACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacerts'  | base64 -d)
            KEYSTORE=$(echo ${KUBENETES_SECRET} | jq -r '.data.keystore'  | base64 -d)
            SIGNCERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.signcerts'  | base64 -d)
            TLSCACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.tlscacerts'  | base64 -d)

            echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
            echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
            echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
            echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
            echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt      
          }
{{- end }}

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts
          getAdminMspSecret admin-msp 

        volumeMounts:
        {{ if .Values.global.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh     
      containers:
      - name: anchorpeer
        image: {{ .Values.image.fabricTools }}:{{ .Values.global.version }}
        imagePullPolicy: IfNotPresent
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
        
          version2_5=`echo $NETWORK_VERSION | grep -c 2.5`

          if [ $version2_5 = 1 ]
          then
            echo "Fetching the most recent configuration block for the channel"
            peer channel fetch config config_block.pb -o ${ORDERER_URL} -c ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA}

            echo "Decoding config block to JSON and isolating config to ${CORE_PEER_LOCALMSPID}config.json"
            configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json 
            jq .data.data[0].payload.data.config config_block.json >"${CORE_PEER_LOCALMSPID}config.json"

            CHECK_ANCHOR=$(jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values.AnchorPeers.value.anchor_peers' ${CORE_PEER_LOCALMSPID}config.json)

            PORT="${CORE_PEER_ADDRESS##*:}"
            HOST="${CORE_PEER_ADDRESS%%:*}"
            if echo "$CHECK_ANCHOR" | grep -q "$HOST"; then
                echo "The anchopeer has already been created"
            else 
              jq '.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values += {"AnchorPeers":{"mod_policy": "Admins","value":{"anchor_peers": [{"host": "'$HOST'","port": '$PORT'}]},"version": "0"}}' ${CORE_PEER_LOCALMSPID}config.json > ${CORE_PEER_LOCALMSPID}modified_config.json

              configtxlator proto_encode --input "${CORE_PEER_LOCALMSPID}config.json" --type common.Config --output original_config.pb
              configtxlator proto_encode --input "${CORE_PEER_LOCALMSPID}modified_config.json" --type common.Config --output modified_config.pb
              configtxlator compute_update --channel_id "${CHANNEL_NAME}" --original original_config.pb --updated modified_config.pb --output config_update.pb
              configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json
              echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . >config_update_in_envelope.json
              configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output "${CORE_PEER_LOCALMSPID}anchors.tx"

              peer channel update -o ${ORDERER_URL} -c ${CHANNEL_NAME} -f ${CORE_PEER_LOCALMSPID}anchors.tx --tls --cafile ${ORDERER_CA}   
            fi   
          else
            echo "Updating anchor peer for the channel ${CHANNEL_NAME}"
            tls_status=${CORE_PEER_TLS_ENABLED}
            if [ "$tls_status" = "true" ]
            then
              peer channel fetch 0 ${CHANNEL_NAME}.block -o ${ORDERER_URL} -c ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA}
            else
              peer channel fetch 0 ${CHANNEL_NAME}.block -o ${ORDERER_URL} -c ${CHANNEL_NAME} 
            fi
            cat ./channel-artifacts/anchors.tx.json | base64 -d > ${CORE_PEER_LOCALMSPID}anchors.tx
            if [ "$tls_status" = "true" ]
            then
              peer channel update -o ${ORDERER_URL} -c ${CHANNEL_NAME} -f ${CORE_PEER_LOCALMSPID}anchors.tx --tls --cafile ${ORDERER_CA}
            else
              peer channel update -o ${ORDERER_URL} -c ${CHANNEL_NAME} -f ${CORE_PEER_LOCALMSPID}anchors.tx
            fi
          fi
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-config
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true
        - name: orderer-tls-cacert
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/orderer/tls/orderer.crt
          subPath: orderer.crt
        {{- if ne (.Values.global.version | trunc 3) "2.5" }}
        - name: anchorpeer-artifacts
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
          readOnly: true
        {{- end }}
{{- end }}
