
##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
apiVersion: batch/v1
kind: Job
metadata:
  name: commitcc-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}-{{ .Values.chaincode.sequence }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app: commitcc-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}-{{ .Values.chaincode.sequence }}
    app.kubernetes.io/name: commitcc-{{ $.Values.chaincode.name }}-{{ .Values.chaincode.sequence }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: commitcc-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}-{{ .Values.chaincode.sequence }}
        app.kubernetes.io/name: commitcc-{{ $.Values.chaincode.name }}-{{ .Values.chaincode.sequence }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      {{- if .Values.vault.imagesecretname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      {{- end }}
      volumes:
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      {{ if .Values.chaincode.pdc.enabled }}
      - name: pdcconfig
        configMap:
          defaultMode: 420
          name: {{ .Release.Name }}-collections-config
      {{ end }}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      - name: package-manager
        configMap:
          name: package-manager
      initContainers:
      - name: certificates-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_PEER_SECRET_PREFIX
          value: "{{ $.Values.vault.adminsecretprefix }}"
        - name: SECRET_PATH
          value: "{{ $.Values.vault.secretpath }}"
        - name: ENDORSING_ORG_NAMES
          value: "{{ $.Values.endorsers.name }}"
        - name: CREATOR_NS
          value: "{{ $.Values.endorsers.creator }}"
        - name: VAULT_ORDERER_SECRET_PREFIX
          value: "{{ $.Values.vault.orderersecretprefix }}"
        - name: MOUNT_PATH
          value: /secret
        {{- range $org := $.Values.endorsers.nameslist }}
        - name: {{ $org.name | upper }}_ENDORSER_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ $org.name }}-endorser-cert
              key: certificate
        {{- end }}
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          . /scripts/bevel-vault.sh

          formatCertificate () {
            NAME="${1##*/}"
            while read line || [ -n "$line" ];
            do 
              echo "$line\n";
            done < ${1} > ${2}/${NAME}.txt
          }

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"
          
          ###############################################################################
          echo "Getting Orderer TLS certificates from Vault."
          vaultBevelFunc "readJson" "${VAULT_ORDERER_SECRET_PREFIX}/tls"

          TLS_CA_CERT=$(echo ${VAULT_SECRET} | jq -r '.["ca.crt"]')

          OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"
          mkdir -p ${OUTPUT_PATH}
          echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt
          ###############################################################################
          echo "Getting MSP certificates from Vault."
          vaultBevelFunc "readJson" "${VAULT_PEER_SECRET_PREFIX}/msp"

          ADMINCERT=$(echo ${VAULT_SECRET} | jq -r '.["admincerts"]')
          CACERTS=$(echo ${VAULT_SECRET} | jq -r '.["cacerts"]')
          KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
          SIGNCERTS=$(echo ${VAULT_SECRET} | jq -r '.["signcerts"]')
          TLSCACERTS=$(echo ${VAULT_SECRET} | jq -r '.["tlscacerts"]')

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts
          
          echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
          echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
          echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
          echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
          echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt

          ###############################################################################
          FORMAT_CERTIFICATE_PATH="/formatcertificate"
          mkdir -p ${FORMAT_CERTIFICATE_PATH}/endorsers
          for name in $ENDORSING_ORG_NAMES
            do
              OUTPUT_PATH="${MOUNT_PATH}/endorsers/$name/msp"
              echo $OUTPUT_PATH
              mkdir -p ${OUTPUT_PATH}/cacerts
              var_name=$(echo "${name}_endorser_secret" | tr '[:lower:]' '[:upper:]')
              endorser_certificate=$(eval echo "\$$var_name")
              echo $endorser_certificate | base64 -d >> ${OUTPUT_PATH}/cacerts/ca.crt

              mkdir -p ${FORMAT_CERTIFICATE_PATH}/${name}
              formatCertificate "${OUTPUT_PATH}/cacerts/ca.crt" "${FORMAT_CERTIFICATE_PATH}/${name}"
              CACERTS_FORMAT=$(cat ${FORMAT_CERTIFICATE_PATH}/${name}/ca.crt.txt)
              echo "
              {
                \"data\": 
                  {
                    \"cacerts\": \"${CACERTS_FORMAT}\"
                  }  
              }" > payload.json
              SECRETPREFIX=${SECRET_PATH}/data/crypto/peerOrganizations/${CREATOR_NS}/endorsers/${name}/users/admin
              vault_secret_key=${SECRETPREFIX}/msp
              
              # This task write the CA server admin credentials to Vault
              vaultBevelFunc 'write' "${vault_secret_key}" 'payload.json'
              # Check CA certificates
              vaultBevelFunc "readJson" "${vault_secret_key}"
              echo "loop# ${VAULT_SECRET}"
              rm payload.json
            done
        volumeMounts:
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      containers:
      - name: commitchaincode
        image: {{ $.Values.metadata.images.fabrictools }}
        imagePullPolicy: IfNotPresent
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash sh

          . /scripts/package-manager.sh
          
          version2_5=`echo $NETWORK_VERSION | grep -c 2.5`
          if [ $version2_5 = 1 ]
          then
            GOPATH="/root/go"
            mkdir -p $GOPATH 
            # Define the packages to install
            packages_to_install="openssh-client git"
            install_packages "$packages_to_install"
          fi 
          ## Checking committed chaincode
          COMMITTED=$(peer lifecycle chaincode querycommitted --channelID ${CHANNEL_NAME} --name ${CHAINCODE_NAME} -O json | \
            jq --arg SEQUENCE "$CHAINCODE_SEQUENCE" --arg VERSION "$CHAINCODE_VERSION" \
            'select((.sequence|tostring)==$SEQUENCE and (.version|tostring)==$VERSION)')
          if [ -n "${COMMITTED}" ]
          then
            echo "chaincode ${CHAINCODE_NAME} with version ${CHAINCODE_VERSION} and sequence ${CHAINCODE_SEQUENCE} is committed in channel ${CHANNEL_NAME}, skipping... "
            exit 0
          fi
          echo $COMMIT_ARGUMENTS>COMMIT_ARGUMENTS.txt
          COMMIT_ARGUMENTS=$(< COMMIT_ARGUMENTS.txt)
          
          COMMITREADINESS_CMD="peer lifecycle chaincode checkcommitreadiness --channelID ${CHANNEL_NAME} --name ${CHAINCODE_NAME} --version ${CHAINCODE_VERSION} --sequence ${CHAINCODE_SEQUENCE} --init-required --output json"
          COMMIT_CMD="peer lifecycle chaincode commit -o ${ORDERER_URL} --tls ${CORE_PEER_TLS_ENABLED} --cafile $ORDERER_CA --channelID ${CHANNEL_NAME} --name ${CHAINCODE_NAME} --version ${CHAINCODE_VERSION} --sequence ${CHAINCODE_SEQUENCE} --init-required"
          
          for item in $ENDORSERS_CORE_PEER_ADDR
          do
            COMMIT_CMD=${COMMIT_CMD}" --peerAddresses "${item}
          done
          echo ${COMMIT_CMD}
          for item in $ENDORSING_ORG_NAMES
          do
            path="/opt/gopath/src/github.com/hyperledger/fabric/crypto/endorsers/${item}/msp/cacerts/ca.crt"
            COMMIT_CMD=${COMMIT_CMD}" --tlsRootCertFiles "${path}
          done
          echo ${COMMIT_CMD}
          if [ "${PDC_ENABLED}" = "true" ]
          then
            pdc_config=" --collections-config /opt/pdc/collections_config.json"
            COMMIT_CMD=${COMMIT_CMD}${pdc_config}
            COMMITREADINESS_CMD=${COMMITREADINESS_CMD}${pdc_config}
          elif [ -n "${COLLECTIONS_CONFIG}" ]
          then
            echo  "chaincode collection config path: ${COLLECTIONS_CONFIG}"
            ## Git repository clone for private data collection config
            mkdir -p /root/.ssh/
            ssh-keyscan {{ $.Values.chaincode.repository.hostname }} > /root/.ssh/known_hosts
            git_password=$(cat /opt/gopath/src/github.com/hyperledger/fabric/crypto/user_cred)
            cd /tmp && git clone https://{{ $.Values.chaincode.repository.git_username }}:$git_password@{{ $.Values.chaincode.repository.url }} -b {{ $.Values.chaincode.repository.branch }} chaincode
            ls
            echo $GOPATH
            mkdir -p $GOPATH/src/github.com/chaincode
            cp -R /tmp/chaincode/{{ $.Values.chaincode.repository.path }}/* $GOPATH/src/github.com/chaincode/
            #Config file path
            CONFIG_SRC_PATH="$GOPATH/src/github.com/chaincode/${CHAINCODE_NAME}/${COLLECTIONS_CONFIG}"
            ## approve for myorg with private data collection config
            echo "peer query approve with collection config"
            collection_config=" --collections-config  ${CONFIG_SRC_PATH}"
            COMMIT_CMD=${COMMIT_CMD}${collection_config} 
            COMMITREADINESS_CMD=${COMMITREADINESS_CMD}${collection_config}
          fi
          echo "Commit Readiness command post collection config " ${COMMITREADINESS_CMD}
          echo "Commit command post collection config " ${COMMIT_CMD} 
          if [ -z ${ENDORSEMENT_POLICIES} ]
          then
            ## check commit readiness
            echo "peer query commitreadiness"
            eval ${COMMITREADINESS_CMD}
            ## commit chaincode
            echo "peer query commit : Endorsement Policy null "
            eval ${COMMIT_CMD}
          else
            ## check commit readiness
            endorsement_policy=" --signature-policy ${ENDORSEMENT_POLICIES}"
            echo "peer query commit readiness"
            COMMITREADINESS_CMD= ${COMMITREADINESS_CMD}${endorsement_policy}
            eval ${COMMITREADINESS_CMD}
            ## commit chaincode
            echo "peer query commit"
            COMMIT_CMD=${COMMIT_CMD}${endorsement_policy}
            eval ${COMMIT_CMD}
          fi
        env:
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.peer.loglevel }}
        - name: CORE_PEER_ID
          value: {{ $.Values.peer.name }}.{{ $.Values.metadata.namespace }}
        - name: CORE_PEER_ADDRESS
          value: {{ $.Values.peer.address }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $.Values.peer.localmspid }}
        - name: CORE_PEER_TLS_ENABLED
          value: "{{ $.Values.peer.tlsstatus }}"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp/tlscacerts/tlsca.crt
        - name: ORDERER_CA
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt
        - name: ORDERER_URL
          value: {{ $.Values.orderer.address }}
        - name: CORE_PEER_MSPCONFIGPATH
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: CHAINCODE_VERSION
          value: "{{ $.Values.chaincode.version }}"
        - name: CHAINCODE_SEQUENCE
          value: "{{ $.Values.chaincode.sequence }}"
        - name: CORE_CHAINCODE_BUILDER
          value: "{{ $.Values.chaincode.builder }}"
        - name: CHANNEL_NAME
          value: "{{ $.Values.channel.name }}"
        - name: COMMIT_ARGUMENTS
          value: '{{ $.Values.chaincode.commitarguments }}'
        - name: CC_RUNTIME_LANGUAGE
          value: "{{ $.Values.chaincode.lang }}"
        - name: ENDORSEMENT_POLICIES
          value: "{{ $.Values.chaincode.endorsementpolicies }}"
        - name: ENDORSERS_CORE_PEER_ADDR
          value: "{{ $.Values.endorsers.corepeeraddress }}"
        - name: ENDORSING_ORG_NAMES
          value: "{{ $.Values.endorsers.name }}"
        - name: COLLECTIONS_CONFIG
          value: "{{ $.Values.chaincode.pdc.collectionsconfig }}" 
        - name: PDC_ENABLED
          value: "{{ $.Values.chaincode.pdc.enabled }}"
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true
        - name: package-manager
          mountPath: /scripts/package-manager.sh
          subPath: package-manager.sh
        {{ if .Values.chaincode.pdc.enabled }}
        - name: pdcconfig
          mountPath: /opt/pdc
        {{ end }}
