##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: invokecc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app: invokecc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
    app.kubernetes.io/name: invokecc-{{ $.Values.chaincode.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: invokecc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
        app.kubernetes.io/name: invokecc-{{ $.Values.chaincode.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      {{- if .Values.vault.imagesecretname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      {{- end }}
      volumes:
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: certificates-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_PEER_SECRET_PREFIX
          value: "{{ $.Values.vault.adminsecretprefix }}"
        - name: VAULT_SECRET_PATH
          value: "{{ $.Values.vault.secretpath }}"
        - name: ENDORSING_ORG_NAMES
          value: "{{ $.Values.endorsers.name }}"
        - name: ENDORSING_CERTS
          value: "{{ $.Values.endorsers.certificates }}"
        - name: CREATOR_NS
          value: "{{ $.Values.endorsers.creator }}"
        - name: VAULT_ORDERER_SECRET_PREFIX
          value: "{{ $.Values.vault.orderersecretprefix }}"
        - name: MOUNT_PATH
          value: /secret
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        {{- range $org := $.Values.endorsers.nameslist }}
        - name: {{ $org.name | upper }}_ENDORSER_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ $org.name }}-endorser-cert
              key: certificate
        {{- end }}
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          . /scripts/bevel-vault.sh

          formatCertificate () {
            NAME="${1##*/}"
            while read line || [ -n "$line" ];
            do 
              echo "$line\n"; 
            done < ${1} > ${2}/${NAME}.txt
          }

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          echo "Getting Orderer TLS certificates from Vault."
          vaultBevelFunc "readJson" "${VAULT_ORDERER_SECRET_PREFIX}/tls"

          TLS_CA_CERT=$(echo ${VAULT_SECRET} | jq -r '.["ca.crt"]')
          OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"
          mkdir -p ${OUTPUT_PATH}
          echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt

          echo "Getting MSP certificates from Vault."
          vaultBevelFunc "readJson" "${VAULT_PEER_SECRET_PREFIX}/msp"

          ADMINCERT=$(echo ${VAULT_SECRET} | jq -r '.["admincerts"]')
          CACERTS=$(echo ${VAULT_SECRET} | jq -r '.["cacerts"]')
          KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
          SIGNCERTS=$(echo ${VAULT_SECRET} | jq -r '.["signcerts"]')
          TLSCACERTS=$(echo ${VAULT_SECRET} | jq -r '.["tlscacerts"]')

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts

          echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
          echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
          echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
          echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
          echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt
          
          ######################################################################

          version2=`echo $NETWORK_VERSION | grep -c 2.`
          if [ $version2 = 1 ];then
            FORMAT_CERTIFICATE_PATH="/formatcertificate"
            mkdir -p ${FORMAT_CERTIFICATE_PATH}/endorsers

            for name in $ENDORSING_ORG_NAMES
              do
                OUTPUT_PATH="${MOUNT_PATH}/endorsers/$name/msp"
                echo $OUTPUT_PATH
                mkdir -p ${OUTPUT_PATH}/cacerts

                var_name=$(echo "${name}_endorser_secret" | tr '[:lower:]' '[:upper:]')
                endorser_certificate=$(eval echo "\$$var_name")
                echo $endorser_certificate | base64 -d >> ${OUTPUT_PATH}/cacerts/ca.crt
          
                mkdir -p ${FORMAT_CERTIFICATE_PATH}/${name}
                formatCertificate "${OUTPUT_PATH}/cacerts/ca.crt" "${FORMAT_CERTIFICATE_PATH}/${name}"
                CACERTS_FORMAT=$(cat ${FORMAT_CERTIFICATE_PATH}/${name}/ca.crt.txt)

                echo "
                {
                  \"data\": 
                    {
                      \"cacerts\": \"${CACERTS_FORMAT}\"
                    }  
                }" > payload.json

                SECRETPREFIX=${VAULT_SECRET_PATH}/data/crypto/peerOrganizations/${CREATOR_NS}/endorsers/${name}/users/admin
                vault_secret_key=${SECRETPREFIX}/msp

                # This task write the CA server admin credentials to Vault
                vaultBevelFunc 'write' "${vault_secret_key}" 'payload.json'

                # Check CA certificates
                vaultBevelFunc "readJson" "${vault_secret_key}"
                rm payload.json
              done
          fi
        volumeMounts:
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      containers:
      - name: invokechaincode
        image: {{ $.Values.metadata.images.fabrictools }}
        imagePullPolicy: IfNotPresent
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash sh
          export ARGS='{"Args":'"'["${INVOKE_ARGUMENTS}"]'"'}'
          export qARGS="'${ARGS}'"

          touch ./invokeChaincode.sh	
          
          version1_4=`echo $NETWORK_VERSION | grep -c 1.4`
          if [ $version1_4 = 1 ] || [ $ADD_ORGANIZATION = 'true' ];then
            echo "peer chaincode invoke -o ${ORDERER_URL} --tls ${CORE_PEER_TLS_ENABLED} --cafile ${ORDERER_CA} -C ${CHANNEL_NAME} -n ${CHAINCODE_NAME} -c $qARGS" >> ./invokeChaincode.sh
            chmod 755 ./invokeChaincode.sh
            sh ./invokeChaincode.sh
          else
            INVOKE_CMD="peer chaincode invoke -o ${ORDERER_URL} --tls ${CORE_PEER_TLS_ENABLED} --cafile $ORDERER_CA --channelID ${CHANNEL_NAME} --name ${CHAINCODE_NAME} --isInit -c $qARGS"
            
            for item in $ENDORSERS_CORE_PEER_ADDR
            do
              INVOKE_CMD=${INVOKE_CMD}" --peerAddresses "${item}
            done

            echo "Building Invoke Command: ${INVOKE_CMD}"

            for item in $ENDORSING_ORG_NAMES
            do
              path="/opt/gopath/src/github.com/hyperledger/fabric/crypto/endorsers/${item}/msp/cacerts/ca.crt"
              INVOKE_CMD=${INVOKE_CMD}" --tlsRootCertFiles "${path}
            done

            echo "Building Invoke Command: ${INVOKE_CMD}"

            if [ -z ${ENDORSEMENT_POLICIES} ]
            then
              eval ${INVOKE_CMD}
            else
              endorsement_policy=" --signature-policy ${ENDORSEMENT_POLICIES}"
              INVOKE_CMD=${INVOKE_CMD}${endorsement_policy}
              eval ${INVOKE_CMD}
            fi
          fi
        env:
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.peer.loglevel }}
        - name: CORE_PEER_ID
          value: {{ $.Values.peer.name }}.{{ $.Values.metadata.namespace }}
        - name: CORE_PEER_ADDRESS
          value: {{ $.Values.peer.address }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $.Values.peer.localmspid }}
        - name: CORE_PEER_TLS_ENABLED
          value: "{{ $.Values.peer.tlsstatus }}"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp/tlscacerts/tlsca.crt
        - name: ORDERER_CA
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt
        - name: ORDERER_URL
          value: {{ $.Values.orderer.address }}
        - name: CORE_PEER_MSPCONFIGPATH
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: CHAINCODE_VERSION
          value: "{{ $.Values.chaincode.version }}"
        - name: CORE_CHAINCODE_BUILDER
          value: "{{ $.Values.chaincode.builder }}"
        - name: CHANNEL_NAME
          value: "{{ $.Values.channel.name }}"
        - name: INVOKE_ARGUMENTS
          value: '{{ $.Values.chaincode.invokearguments }}'
        - name: CC_RUNTIME_LANGUAGE
          value: "{{ $.Values.chaincode.lang }}"
        - name: ENDORSEMENT_POLICIES
          value: "{{ $.Values.chaincode.endorsementpolicies }}"
        - name: ENDORSERS_CORE_PEER_ADDR
          value: "{{ $.Values.endorsers.corepeeraddress }}"
        - name: ENDORSING_ORG_NAMES
          value: "{{ $.Values.endorsers.name }}"
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        - name: ADD_ORGANIZATION
          value: "{{ $.Values.metadata.add_organization }}"
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true
