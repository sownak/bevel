##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app: genesis
    app: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.global.serviceAccountName }}
      securityContext:
        fsGroup: 1000
      containers:
      - name: generate-genesis
        image: {{ $.Values.node.image }}:{{ $.Values.node.imageTag }}
        imagePullPolicy: {{ $.Values.node.pullPolicy }}
        volumeMounts:
          - name: certcheck
            mountPath: certcheck
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
{{- if eq .Values.global.vault.type "hashicorp" }}
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
{{- end }}
        env:
{{- if eq .Values.global.vault.type "hashicorp" }}
        - name: VAULT_ADDR
          value: {{ $.Values.global.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.global.vault.authPath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.global.vault.role }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.global.vault.secretPrefix }}
        - name: VAULT_SECRET_ENGINE
          value: {{ .Values.global.vault.secretEngine }}
        - name: VAULT_TYPE
          value: {{ .Values.global.vault.type }}
        - name: CERTS_SECRET_PREFIX
          value: {{ .Values.global.vault.certPrefix }}
{{- end }}
        - name: MOUNT_PATH
          value: "certcheck"
        command: ["bash", "-c"]
        args:
        - |-

          echo "Step 1: Check if the node image is available and install necessary packages if needed."
          {{- if ne $.Values.node.image "docker.io/paritytech/substrate-playground-template-node-template" }}
            # Install necessary packages using custom package manager script
            . /scripts/package-manager.sh
            packages_to_install="jq bc curl unzip base58 xxd"
            install_packages "$packages_to_install"
            
            # Check if jq is installed and download it if not installed
            if ! command -v jq &> /dev/null; then
              cd ~
              curl -k -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq
              export PATH="$PATH:$HOME"
            else
              echo "jq is already installed via package-manager.sh script."
            fi   
          {{- end }}
          # Download and set up kubectl for Kubernetes management
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          kubectl version --client
          
          echo "Step 2: Execute the provided command to generate the genesis block."
          mkdir certcheck
          command={{ $.Values.node.command }}
          echo "Generate genesis"
          GENESIS=$($command build-spec --disable-default-bootnode --chain local)
          
          echo "Step 3: Edit genesis configuration."
          # Set values
          GENESIS=$(echo $GENESIS | jq '.name |= {{ .Values.chain | quote }}')
          GENESIS=$(echo $GENESIS | jq '.id |= {{ .Values.chain | replace "-" "_" | quote }}')
          GENESIS=$(echo $GENESIS | jq '.chainType |= "Live"')
          # Clear authorities and balances
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.aura.authorities |= []')
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.grandpa.authorities |= []')
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.balances.balances |= []')
          {{- if eq $.Values.node.image "ghcr.io/inteli-poc/dscp-node" }}
            GENESIS=$(echo $GENESIS | jq '.genesis.runtime.nodeAuthorization.nodes |= []')
            GENESIS=$(echo $GENESIS | jq '.genesis.runtime.membership.members |= []')
          {{- end }}
          
          echo "Step 4: Generate sudo key with Sr25519 scheme and add sudo account key and balance into genesis."
          # Generate sudo key with Sr25519 scheme        
          $command key generate --scheme Sr25519 --output-type json >> certcheck/sudoKeygenOutput.json
          SUDO_SEED=$(jq -r '.secretPhrase' certcheck/sudoKeygenOutput.json)
          SUDO_ADDR=$(jq -r '.ss58Address' certcheck/sudoKeygenOutput.json)
          # Add sudo account key and balance into genesis
          GENESIS=$(echo $GENESIS | jq --arg sudo $SUDO_ADDR --arg balance 1152921504606846976 '.genesis.runtime.balances.balances += [[$sudo, ($balance | tonumber)]]')
          GENESIS=$(echo $GENESIS | jq --arg sudo $SUDO_ADDR '.genesis.runtime.sudo.key |= $sudo')
          
          echo "Step 5: Insert AURA & GRANDPA keys into genesis for validators."
          echo "Inserting keys into genesis for validators"
          
          # Iterate over each organization namespace
          {{- range .Values.org_namespaces }}
            # Extract the org name (first key in the current item)
            {{- $org_name := . | keys | first }}
            # Access the 'validator' list using the index function and print each validator
            {{- $validators := index . $org_name "validator" }}
            
            {{- range $validators }}
              echo "  Validator: {{ . }}"
              secret_data=$(kubectl get secret "{{ . }}-keys" --namespace {{ $org_name }} -o json | jq -r '.data["substrate-node-keys"]' | base64 -d)
              
              # Check if secret_data is empty or not
              if [ -n "$secret_data" ]; then
                # Extract aura_addr and grandpa_addr
                aura_addr=$(echo "$secret_data" | jq -r '.data.aura_addr')
                grandpa_addr=$(echo "$secret_data" | jq -r '.data.grandpa_addr')
                
                # Check if extraction successful
                if [ -n "$aura_addr" ] && [ -n "$grandpa_addr" ]; then
                  # Insert aura_addr keys into GENESIS JSON
                  GENESIS=$(echo "$GENESIS" | jq --arg aura "$aura_addr" '.genesis.runtime.aura.authorities += [$aura]')
                  GENESIS=$(echo "$GENESIS" | jq --arg grandpa "$grandpa_addr" '.genesis.runtime.grandpa.authorities += [[$grandpa, 1]]')
                else
                  echo "Error: Unable to retrieve aura_addr or grandpa_addr key for validator $validator"
                fi
              else
                echo "Error: Unable to retrieve aura_addr or grandpa_addr key for validator $validator."
              fi
            {{- end }}
          {{- end }}
          echo "Key insertion process completed."
          
          echo "Step 6: Adding member accounts and their balances to genesis."
          {{- range .Values.org_namespaces }}
            # Extract the org name (first key in the current item)
            {{- $org_name := . | keys | first }}
            # Access the 'member' list
            {{- $members := index . $org_name "member" }}
            # Access the 'validator' list
            {{- $validators := index . $org_name "validator" }}
            
            # Iterate through members
            {{- range $members }}
              account_addr=$(kubectl get secret "{{ . }}-keys" --namespace "{{ $org_name }}" -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.account_addr')
              
              GENESIS=$(echo "$GENESIS" | jq --arg account_id "$account_addr" --arg balance {{ $.Values.node.member.balance }} '.genesis.runtime.balances.balances += [[$account_id, ($balance | tonumber)]]')
              GENESIS=$(echo "$GENESIS" | jq --arg account_id "$account_addr" '.genesis.runtime.membership.members += [$account_id]')
              
              {{- range $validators }}
                node_id=$(kubectl get secret "{{ . }}-keys" --namespace "{{ $org_name }}" -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.node_id')
                base58=$(echo -n "$node_id" | base58 -d | xxd -p | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
                arr_node_id=($(echo $base58 | fold -w2))
                GENESIS=$(echo $GENESIS | jq --arg owner "$account_addr" '.genesis.runtime.nodeAuthorization.nodes += [[[], $owner]]')
                for byte in "${arr_node_id[@]}"
                do
                  # Add each byte of the node ID to the authorization
                  GENESIS=$(echo $GENESIS | jq --arg byte $(echo "obase=10; ibase=16; $byte" | bc) '.genesis.runtime.nodeAuthorization.nodes[-1][0] += [($byte | tonumber)]')
                done
              {{- end }}
              {{- range $members }}
                node_id=$(kubectl get secret "{{ . }}-keys" --namespace "{{ $org_name }}" -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.node_id')
                base58=$(echo -n "$node_id" | base58 -d | xxd -p | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
                arr_node_id=($(echo $base58 | fold -w2))
                GENESIS=$(echo $GENESIS | jq --arg owner "$account_addr" '.genesis.runtime.nodeAuthorization.nodes += [[[], $owner]]')
                for byte in "${arr_node_id[@]}"
                do
                  # Add each byte of the node ID to the authorization
                  GENESIS=$(echo $GENESIS | jq --arg byte $(echo "obase=10; ibase=16; $byte" | bc) '.genesis.runtime.nodeAuthorization.nodes[-1][0] += [($byte | tonumber)]')
                done
              {{- end }}
            {{- end }}
          {{- end }}
          
          echo "Step 7: Update the format of the modified genesis JSON and create a config map if it doesn't exist."
          # Write the modified genesis JSON to a file
          echo "$GENESIS" > certcheck/genesis.json
          
          # Convert the genesis JSON to raw format
          echo "Converting genesis to raw format"
          GENESIS=$($command build-spec --disable-default-bootnode --raw --chain certcheck/genesis.json)
          echo "$GENESIS" > certcheck/genesis_raw.json
          # Encode the raw genesis JSON to base64
          cat certcheck/genesis_raw.json | base64 -w0 > certcheck/genesis_base64 # No need to encode it if you wanna store genesis as a K8s secret
          
          {{- range .Values.org_namespaces }}
            # Extract the org name (first key in the current item)
            {{- $org_name := . | keys | first }}
            
            # Create the config map "substrate-genesis" using the base64 encoded genesis JSON and sudoKeygenOutput.json if it doesn't exist
            if ! kubectl get configmap "substrate-genesis" --namespace {{ $org_name }} &> /dev/null; then
              kubectl create configmap "substrate-genesis" --namespace {{ $org_name }} --from-file=genesis="${MOUNT_PATH}/genesis_base64" --from-file=sudoKeygenOutput="${MOUNT_PATH}/sudoKeygenOutput.json"
            fi
          {{- end }}
          echo "COMPLETED!"
{{- if eq .Values.global.vault.type "hashicorp" }}
          # Initialize the token
          . /scripts/bevel-vault.sh
          vaultBevelFunc "init"
          
          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/genesis"
          vaultBevelFunc "readJson" "$vault_secret_key"
          
          # The vault CLI is required for this job as the genesis file is too large to be passed in via a vault API call
          echo "Installing Vault CLI"
          curl -O -L https://releases.hashicorp.com/vault/1.7.1/vault_1.7.1_linux_amd64.zip
          unzip vault_1.7.1_linux_amd64.zip
          {{- if eq $.Values.node.image "docker.io/paritytech/substrate-playground-template-node-template" }}
          export PATH=$PATH:~/workspace
          {{- else }}
          mv vault /bin
          {{- end }}
          vault --version
          # Save the generated keys to VAULT
          if [ "$SECRETS_AVAILABLE" == "no" ]; then
            vault_secret_key="${VAULT_SECRET_ENGINE}/${CERTS_SECRET_PREFIX}/genesis"
            vault kv put "$vault_secret_key" genesis=@"${MOUNT_PATH}/genesis_base64" sudo_details=@"${MOUNT_PATH}/sudoKeygenOutput.json"
          fi
{{- end }}
      volumes:
        - name: certcheck
          emptyDir:
            medium: Memory
        - name: package-manager
          configMap:
            name: package-manager
{{- if eq .Values.global.vault.type "hashicorp" }}
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
{{- end }}
