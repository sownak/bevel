{{ $fullname :=  include "node.fullname" . }}
{{ $selectorLabels :=  include "node.selectorLabels" . }}
{{ $serviceLabels :=  include "node.serviceLabels" .  }}
{{ $serviceAccountName :=  include "node.serviceAccountName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}  
  labels:
    {{- include "node.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  podManagementPolicy: {{ default "OrderedReady" .Values.node.podManagementPolicy }}
  replicas: {{ .Values.node.replicas | int }}
  serviceName: {{ $fullname }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
      {{- include "node.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.node.chainDataSnapshotUrl }}
        - name: download-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping chain snapshot download"
              else
                echo "Downloading chain snapshot"
                SNAPSHOT_URL="{{ .Values.node.chainDataSnapshotUrl }}"
                wget -O /data/snapshot ${SNAPSHOT_URL}
                if [ ! -f /data/snapshot ]; then
                  echo "Failed to download chain snapshot"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/
                if [ "${SNAPSHOT_FORMAT}" == "7z" ]; then
                  7z x /data/snapshot -o/data/chains/${CHAIN_PATH}/
                else
                  tar xvf /data/snapshot --directory=/data/chains/${CHAIN_PATH}/db/full/
                fi
                rm /data/snapshot
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
            - name: SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.chainDataSnapshotFormat }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.collator.relayChainDataSnapshotUrl }}
        - name: download-relay-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping relay-chain snapshot download"
              else
                echo "Downloading relay-chain snapshot"
                RELAY_SNAPSHOT_URL="{{ .Values.node.collator.relayChainDataSnapshotUrl }}"
                wget -O /data/relay-snapshot ${RELAY_SNAPSHOT_URL}
                if [ ! -f /data/relay-snapshot ]; then
                  echo "Failed to download relay-chain snapshot"
                  exit 1
                fi
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/
                if [ "${RELAY_SNAPSHOT_FORMAT}" == "7z" ]; then
                  7z x /data/relay-snapshot -o/data/relay/chains/${RELAY_CHAIN_PATH}/
                else
                  tar xvf /data/relay-snapshot --directory=/data/relay/chains/${RELAY_CHAIN_PATH}/db/full/
                fi
                rm /data/relay-snapshot
              fi
          env:
            - name: RELAY_SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.collator.relayChainDataSnapshotFormat }}
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.chainDataGcsBucketUrl }}
        - name: sync-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.chainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/db/full
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/chains/${CHAIN_PATH}/db/full/
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
            {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
            {{- end }}
        {{- end }}
        {{- if .Values.node.collator.relayChainDataGcsBucketUrl }}
        - name: sync-relay-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/db" ]; then
                echo "Relay-chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.collator.relayChainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/db/full
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/relay/chains/${RELAY_CHAIN_PATH}/db/full/
              fi
          env:
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
            {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
            {{- end }}
        {{- end }}
        {{- if and .Values.node.customChainspecUrl .Values.node.collator.relayChainCustomChainspecUrl }}
        - name: download-chainspec
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if and (.Values.node.customChainspecUrl) (.Values.node.customChainspecPath) }}
              if [ ! -f {{ .Values.node.customChainspecPath }} ]; then
                wget -O {{ .Values.node.customChainspecPath }} {{ .Values.node.customChainspecUrl }}
              fi
              {{- end }}
              {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
              if [ ! -f {{ .Values.node.relayChainCustomChainspecPath }} ]; then
                wget -O {{ .Values.node.relayChainCustomChainspecPath }} {{ .Values.node.collator.relayChainCustomChainspecUrl }}
              fi
              {{- end }}
          volumeMounts:
            - name: chain-data
              mountPath: /data
        {{- end }}
      containers:
        - name: {{ .Values.node.chain }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
          - |-

            #!/bin/sh

              echo "Step 1: Install necessary packages using custom package manager script"
              . /scripts/package-manager.sh
              packages_to_install="jq curl"
              install_packages "$packages_to_install"

              echo "STEP-2: Download and set up kubectl for Kubernetes management"
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/
              kubectl version --client

              echo "Step 3: Extract chain specification (genesis) from Kubernetes ConfigMap and store it"
              chain_spec=$(kubectl get configmap "substrate-genesis" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["genesis"]')
              echo "${chain_spec}" | base64 -d > {{ .Values.node.customChainspecPath }}

              echo "Step 4: Retrieve secret keys from Kubernetes Secrets if available"
              secretName="{{ .Values.node_keys_k8s }}"
              if kubectl get secret "${secretName}" --namespace {{ .Release.Namespace }} >/dev/null 2>&1; then
                # Extract AURA secret phrase from Kubernetes Secret
                AURA_SECRETPHRASE=$(kubectl get secret "${secretName}" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.aura_file_b64' | base64 -d | jq -r '.secretPhrase')
                # Extract GRANDPA secret phrase from Kubernetes Secret
                GRAN_SECRETPHRASE=$(kubectl get secret "${secretName}" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.grandpa_file_b64' | base64 -d | jq -r '.secretPhrase')
                # Extract NODE_KEY from Kubernetes Secret
                NODE_KEY=$(kubectl get secret "${secretName}" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.node_key')
              fi
              # Check if bootnode is enabled
              {{- if .Values.node.isBootnode.enabled }}
                # Retrieve BOOTNODE_ID from Kubernetes Secret
                BOOTNODE_ID="{{ .Values.node.isBootnode.boot_node_id }}"
              {{- end }}

              echo "Step 5: Insert keys into Keystore using dscp-node command-line tool"
              # Insert AURA key into Keystore
              ./{{ .Values.node.command }} key insert --base-path=/data --chain=/data/chainspec.json --key-type=aura --scheme=Sr25519 --suri="${AURA_SECRETPHRASE}" && echo "Inserted key aura into Keystore" || echo "Failed to insert key aura into Keystore."
              # Insert GRANPA key into Keystore
              ./{{ .Values.node.command }} key insert --base-path=/data --chain=/data/chainspec.json --key-type=gran --scheme=Ed25519 --suri="${GRAN_SECRETPHRASE}" && echo "Inserted key gran into Keystore" || echo "Failed to insert key gran into Keystore."

              echo "Step 6: Determine various ports and external addresses for P2P communication"
              POD_INDEX="${HOSTNAME##*-}"
              {{- if and (.Values.node.perNodeServices.createP2pService) (eq .Values.node.perNodeServices.p2pServiceType "NodePort") }}
                RELAY_CHAIN_P2P_PORT=$(kubectl --namespace {{ .Release.Namespace }} get service {{ $fullname}}-${POD_INDEX}-rc-p2p -o jsonpath='{.spec.ports[*].nodePort}')
              {{- else if or (eq .Values.node.perNodeServices.p2pServiceType "LoadBalancer") (eq .Values.node.perNodeServices.p2pServiceType "ClusterIP") }}
                RELAY_CHAIN_P2P_PORT=30333 # Default port
              {{- end }}
              
              {{- if and (.Values.node.perNodeServices.createP2pService) (.Values.node.collator.isParachain) (eq .Values.node.perNodeServices.p2pServiceType "Nodeport") }}
                PARA_CHAIN_P2P_PORT=$(kubectl --namespace {{ .Release.Namespace }} get service {{ $fullname }}-${POD_INDEX}-pc-p2p -o jsonpath='{.spec.ports[*].nodePort}')
              {{- else if and (.Values.node.collator.isParachain) (or (eq .Values.node.perNodeServices.p2pServiceType "LoadBalancer") (eq .Values.node.perNodeServices.p2pServiceType "ClusterIP")) }}
                PARA_CHAIN_P2P_PORT=30334 # Default port
              {{- end }}
              
              {{- if and (.Values.node.perNodeServices.createP2pService) (.Values.node.perNodeServices.setPublicAddressToExternal.enabled) (eq .Values.node.perNodeServices.p2pServiceType "NodePort") }}
                EXTERNAL_ADDRESS=$(curl -sS {{ .Values.node.perNodeServices.setPublicAddressToExternal.ipRetrievalServiceUrl }})
              {{- else if and .Values.node.perNodeServices.setPublicAddressToExternal.enabled (eq .Values.node.perNodeServices.p2pServiceType "LoadBalancer") }}
                EXTERNAL_ADDRESS=$(kubectl --namespace {{ .Release.Namespace }} get service {{ $fullname }}-${POD_INDEX}-rc-p2p -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              {{- else if eq .Values.proxy.provider "ambassador" }}
                EXTERNAL_ADDRESS="{{ $fullname }}-${POD_INDEX}.{{ .Values.proxy.external_url }}"
                EXTERNAL_P2P_PORT="{{ .Values.proxy.p2p }}"
              {{- else if eq .Values.node.perNodeServices.p2pServiceType "ClusterIP" }}
                EXTERNAL_ADDRESS={{ $fullname }}-${POD_INDEX}-rc-p2p.{{ .Release.Namespace }}.svc.cluster.local
                EXTERNAL_P2P_PORT="{{ .Values.node.ports.p2p }}"
              {{- end }}
 
              echo "Step 7: Start the node"
              exec {{ .Values.node.command }} \
              --name=${POD_NAME} \
              --base-path=/data/ \
              --node-key=${NODE_KEY} \
              --chain={{ if .Values.node.customChainspecUrl }}{{ .Values.node.customChainspecPath }}{{ else }}${CHAIN}{{ end }} \
              {{- if or (eq .Values.node.role "authority") (eq .Values.node.role "validator") }}
              --validator \
              {{- else if eq .Values.node.role "collator" }}
              --collator \
              {{- else if or (eq .Values.node.role "light") (eq .Values.node.role "member")  }}
              --light \
              {{- end }}
              {{- if .Values.node.isBootnode.enabled }}
              --bootnodes "/dns4/{{ .Values.node.isBootnode.bootnodeAddr }}/tcp/{{ .Values.node.isBootnode.bootnodePort }}/p2p/${BOOTNODE_ID}" \
              {{- end }}
              {{- if (.Values.node.collator.isParachain) }}
              --base-path=/data/relay/ \
              --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${PARA_CHAIN_P2P_PORT} \
              --listen-addr=/ip4/0.0.0.0/tcp/${PARA_CHAIN_P2P_PORT} \
              {{- else if (.Values.node.perNodeServices.createP2pService) }}
              --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${EXTERNAL_P2P_PORT} \
              --listen-addr=/ip4/0.0.0.0/tcp/${RELAY_CHAIN_P2P_PORT} \
              {{- end }}
              {{- if .Values.node.tracing.enabled }}
              --jaeger-agent=127.0.0.1:{{ .Values.jaegerAgent.ports.compactPort }} \
              {{- end }}
              {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
              --chain={{ .Values.node.relayChainCustomChainspecPath }} \
              {{- end }}
              {{- join " " .Values.node.flags | nindent 16 }} \
              {{- join " " .Values.node.collator.relayChainFlags | nindent 16 }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: "$(POD_NAME)"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 9933
              name: http-rpc
              protocol: TCP
            - containerPort: 9944
              name: websocket-rpc
              protocol: TCP
            - containerPort: 9615
              name: prometheus
              protocol: TCP
            - containerPort: 30333
              name: p2p
              protocol: TCP
          {{- if .Values.node.collator.isParachain }}
            - containerPort: 30334
              name: pc-p2p
              protocol: TCP
          {{- end }}
          {{- if .Values.node.enableStartupProbe }}
          # On startup, retry the connection to the /health endpoint every 10s for 5 min before killing the container
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: /health
              port: http-rpc
          {{- end }}
          {{- if .Values.node.enableReadinessProbe }}
          # Continuously retry the connection to the WS endpoint every 10s for 24h until success before marking the container as ready
          # If the WS endpoint is still not reachable (ie. node not fully synced) after 24 hours have passed, the container will be stuck in 'Not Ready' state
          readinessProbe:
            failureThreshold: 8640
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            # Important: the readiness probe will only work properly if the WS endpoint is exposed with --ws-external
            tcpSocket:
              port: websocket-rpc
          {{- end }}
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
          - mountPath: /secrets
            name: keystore
          - mountPath: /data
            name: chain-data
          {{- if .Values.node.persistGeneratedNodeKey }}
          {{- else if .Values.node.customNodeKey }}
          - mountPath: /tmp/
            name: custom-node-key
            readOnly: true
          {{- end }}
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
        {{- if .Values.node.substrateApiSidecar.enabled }}
        - name: substrate-api-sidecar
          image: {{ .Values.substrateApiSidecar.image.repository }}:{{ .Values.substrateApiSidecar.image.tag }}
          env:
            {{- range $key, $val := .Values.substrateApiSidecar.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.substrateApiSidecar.resources | nindent 12 }}
          ports:
            - containerPort: 8080
              name: api-sidecar
              protocol: TCP
        {{- end}}
        {{- if .Values.node.tracing.enabled }}
        - name: jaeger-agent-sidecar
          image: {{ .Values.jaegerAgent.image.repository }}:{{ .Values.jaegerAgent.image.tag }}
          args:
            - --reporter.grpc.host-port={{ .Values.jaegerAgent.collector.url }}:{{ .Values.jaegerAgent.collector.port }}
          env:
            {{- range $key, $val := .Values.jaegerAgent.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
          resources:
          {{- toYaml .Values.jaegerAgent.resources | nindent 12 }}
          ports:
            - name: jaeger-compact
              containerPort: {{ .Values.jaegerAgent.ports.compactPort }}
              protocol: UDP
            - name: jaeger-binary
              containerPort: {{ .Values.jaegerAgent.ports.binaryPort }}
              protocol: UDP
            - name: http
              containerPort: {{ .Values.jaegerAgent.ports.samplingPort }}
              protocol: TCP
            - name: admin
              containerPort: 14271
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: admin
          readinessProbe:
            httpGet:
              path: /
              port: admin
        {{- end}}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end}}
      serviceAccountName: {{ $serviceAccountName }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.googleCloudSdk.serviceAccountKey }}
        - name: service-account-key
          secret:
            secretName: chain-data-gcs-bucket-service-account-key
      {{- end }}
      {{- if .Values.node.persistGeneratedNodeKey }}
      {{- else if .Values.node.customNodeKey }}
        - name: custom-node-key
          secret:
            secretName: {{ $fullname }}-custom-node-key
      {{- end }}
      {{- range $keys := .Values.node.keys }}
        - name: {{ .type }}
          secret:
            secretName: {{ $fullname }}-{{ .type }}
            defaultMode: 0400
      {{- end }}
        - name: keystore
          emptyDir:
            medium: Memory
        - name: package-manager
          configMap:
            name: package-manager
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.node.chainDataKubernetesVolumeSnapshot }}
        dataSource:
          name: {{ .Values.node.chainDataKubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        storageClassName: substrate-storage-{{ .Release.Name }}
        resources:
          requests:
            storage: {{ .Values.storage.size }}
