---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  {{- if .Values.config.deployment.annotations }}
  annotations:
{{ toYaml .Values.config.deployment.annotations | indent 8 }}
    {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.config.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceAccountName }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: init-check-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certsecretprefix }}
          command: ["sh", "-c"]
          args:
          - |-
              #!/usr/bin/env sh
               validateVaultResponse () {
                 if echo ${2} | grep "errors"; then
                    echo "ERROR: unable to retrieve ${1}: ${2}"
                    exit 1
                 fi
               }

              # Setting up the environment to get secrets/certificates from Vault
              echo "Getting secrets/certificates from Vault server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "Logged into Vault"
               
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # Get keystores from Vault, to see if the certificates are created and have been put in Vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs | jq -r 'if .errors then . else . end')
                  if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    break
                  fi 
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                echo "Certificates might not have been put in Vault. Giving up after $COUNTER tries!"
                exit 1
              fi
              echo "Done"      
        - name: init-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
           - name: VAULT_ADDR
             value: {{ $.Values.vault.address }}
           - name: KUBERNETES_AUTH_PATH
             value: {{ $.Values.vault.authPath }}
           - name: VAULT_APP_ROLE
             value: {{ $.Values.vault.role }}
           - name: BASE_DIR
             value: {{ $.Values.config.volume.baseDir }}
           - name: CERTS_SECRET_PREFIX
             value: {{ .Values.vault.certSecretPrefix }}
           - name: MOUNT_PATH
             value: "/DATA"       
          command: ["sh", "-c"]
          args:
          - |-
               #!/usr/bin/env sh
               validateVaultResponse () {
               if echo ${2} | grep "errors"; then
                echo "ERROR: unable to retrieve ${1}: ${2}"
                exit 1
                fi
               }
               # setting up env to get secrets from vault
               echo "Getting secrets from Vault Server"
               KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
               VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
               validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
               
               mkdir -p ${MOUNT_PATH}
               mkdir -p ${MOUNT_PATH}/signer;
               mkdir -p ${MOUNT_PATH}/root;
               
               # signer-files from vault
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs | jq -r 'if .errors then . else . end')
               validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs)" "${LOOKUP_SECRET_RESPONSE}"
               idm_jks=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["identity-manager-key-store.jks"]')
               echo "${idm_jks}" | base64 -d > ${MOUNT_PATH}/signer/identity-manager-key-store.jks

               nms_jks=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["network-map-key-store.jks"]')
               echo "${nms_jks}" | base64 -d > ${MOUNT_PATH}/signer/network-map-key-store.jks

               corda_ssl_signer=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["corda-ssl-signer-keys.jks"]')
               echo "${corda_ssl_signer}" | base64 -d > ${MOUNT_PATH}/signer/corda-ssl-signer-keys.jks
               
               # ssl trust-stores from vault
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
               validateVaultResponse "secret (${CERTS_SECRET_PREFIX}/root/certs)" "${LOOKUP_SECRET_RESPONSE}"

               corda_ssl_trust_store=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["corda-ssl-trust-store.jks"]')
               echo "${corda_ssl_trust_store}" | base64 -d > ${MOUNT_PATH}/root/corda-ssl-trust-store.jks

               echo "Done"
          volumeMounts:
          - name: certificates
            mountPath: /DATA
      containers:
      - name: signer
        image: "{{ required "signer[main]: missing value for .Values.iamage.signerContainerName" .Values.image.signerContainerName }}"
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cp CM-FILES/signer.conf etc/signer.conf;
          java -Xmx{{ .Values.config.cordaJar.memorySize }}{{ .Values.config.cordaJar.unit }} -jar {{ .Values.config.jarPath }}/signer.jar --config-file {{ .Values.config.configPath }}/signer.conf
        volumeMounts:
        - name: signer-conf
          mountPath: /opt/corda/CM-FILES/signer.conf
          subPath: signer.conf
        - name: pkitool-signer-etc
          mountPath: /opt/corda/etc
        - name: signer-logs
          mountPath: /opt/corda/logs
        - name: certificates
          mountPath: /opt/corda/DATA
        resources:
          requests:
            memory: {{ .Values.config.pod.resources.requests }}
          limits:
            memory: {{ .Values.config.pod.resources.limits }}
      - name: logs
        image: "{{ required "signer[main]: missing value for .Values.iamage.signerContainerName" .Values.image.signerContainerName }}"
        env:
        - name: ACCEPT_LICENSE
          value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cd /opt/corda/
          while true; do tail -f logs/signing-service/*.log 2>/dev/null ; sleep 5; done
          # in case sth went wrong just wait indefinitely ...
          tail -f /dev/null
        volumeMounts:
        - name: signer-logs
          mountPath: /opt/corda/logs
      imagePullSecrets:
      - name: {{ .Values.image.imagePullSecret }}
      volumes:
        - name: signer-conf
          configMap:
            name: {{ .Values.nodeName }}-cenm-conf
        - name: pkitool-signer-etc
          emptyDir:
            medium: Memory
        - name: signer-logs
          emptyDir:
            medium: Memory
        - name: certificates
          emptyDir:
            medium: Memory
