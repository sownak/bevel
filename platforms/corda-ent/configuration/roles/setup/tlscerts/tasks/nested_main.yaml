# This role pulls the idman & networkmap certs from the vault of CENM and pushes it to the vault of all other organizations

- name: Set idman & networkmap info in variables
  set_fact:
    idman_name: "{{ network | json_query('orderers[?type==`idman`].name') | first }}"
    idman_tlscert_path: "{{ network | json_query('orderers[?type==`idman`].certificate') | first }}"
    networkmap_name: "{{ network | json_query('orderers[?type==`networkmap`].name') | first }}"
    networkmap_tlscert_path: "{{ network | json_query('orderers[?type==`networkmap`].certificate') | first }}"

# Check if the idman tls certificate is already present in the vault or not
- name: Check if the idman tls certificate is already present in the vault or not
  shell: |
    vault read -field=idman.crt secret/{{ peer.name }}/certs/{{ idman_name }}
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: vault_idman_tlscert
  ignore_errors: yes

# This task copies the idman tls certificate to each peer vault
- name: Copy the idman tls certificate to each peer vault
  shell: |
    vault kv put secret/{{ peer.name }}/certs/{{ idman_name }} idman.crt="$(cat {{ idman_tlscert_path }} | base64 )"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: vault_idman_tlscert.failed == True

# Check if the networkmap tls certificate is already present in the vault or not
- name: Check if the networkmap tls certificate is already present in the vault or not
  shell: |
    vault read -field=networkmap.crt secret/{{ peer.name }}/certs/{{ networkmap_name }}
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: vault_networkmap_tlscert
  ignore_errors: yes

# This task copies the networkmap tls certificate to each peer vault
- name: Copy the networkmap tls certificate to each peer vault
  shell: |
    vault kv put secret/{{ peer.name }}/certs/{{ networkmap_name }} networkmap.crt="$(cat {{ networkmap_tlscert_path }} | base64 )"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: vault_networkmap_tlscert.failed == True
