##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.node.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  name: {{ .Values.node.name }}
spec:
  serviceName: {{ .Values.node.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consortiumchain
      service.rpc: {{ .Values.node.name }}
      app.kubernetes.io/name: {{ .Values.node.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: consortiumchain
        name: {{ .Values.node.name }}
        service.rpc: {{ .Values.node.name }}
        app.kubernetes.io/name: {{ .Values.node.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.node.name }}
      imagePullSecrets:
          - name: {{ .Values.node.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: mysql
          emptyDir:
            medium: Memory
        - name: {{ .Values.node.name }}-genesis-volume
          configMap:
            name: genesis-{{ .Values.node.name }}
            items:
              - key: genesis.json.base64
                path: genesis.json.base64
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
        - name: package-manager
          configMap:
            name: package-manager
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: MOUNT_PATH
          value: "/secret"
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash
          . /scripts/bevel-vault.sh

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          nodekey=$(echo ${VAULT_SECRET} | jq -r '.["nodekey"]')
          keystore=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]' | base64 -d )
          gethpassword=$(echo ${VAULT_SECRET} | jq -r '.["geth_password"]')
          username=$(echo ${VAULT_SECRET} | jq -r '.["db_user"]')
          password=$(echo ${VAULT_SECRET} | jq -r '.["db_password"]')
          
          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}
          
          echo -n "${gethpassword}" > ${OUTPUT_PATH}/passwords.txt
          echo -n "${nodekey}" > ${OUTPUT_PATH}/nodekey
          echo -n "${keystore}" > ${OUTPUT_PATH}/{{ .Values.node.keystore }}
          echo "${username}" > ${OUTPUT_PATH}/username
          echo "${password}" > ${OUTPUT_PATH}/password

          if [ {{ $.Values.tm.type }} != "none" ]
          then
            # Calling a function to retrieve secrets from Vault only if they exist.
            vaultBevelFunc "readJson" "${VAULT_SECRET_PREFIX}/{{ .Values.vault.tm_keyname }}"
            tmpub=$(echo ${VAULT_SECRET} | jq -r '.["publicKey"]')
            tmkey=$(echo ${VAULT_SECRET} | jq -r '.["privateKey"]')

            echo -n "${tmpub}" > ${OUTPUT_PATH}/tm.pub
            echo -n "${tmkey}" > ${OUTPUT_PATH}/tm.key
          fi
          echo "Done checking for certificates in vault."
        volumeMounts:
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      - name: quorum-genesis-init-container
        image: "{{ .Values.images.node }}"
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p $QUORUM_DATA_DIR;
          cat {{ .Values.node.mountPath }}/genesis/genesis.json.base64 | base64 -d > $QUORUM_DATA_DIR/genesis.json;
            if [ ! -f $QUORUM_DATA_DIR/genesis_created ]; then
              echo \"running geth init\";
              /usr/local/bin/geth --datadir $QUORUM_DATA_DIR init $QUORUM_DATA_DIR/genesis.json;
              date > $QUORUM_DATA_DIR/genesis_created;
            fi;
          "
        env:
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
          - name: QHOME
            value: {{ .Values.node.mountPath }}
        volumeMounts:
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
        - name: {{ .Values.node.name }}-genesis-volume
          mountPath: {{ .Values.node.mountPath }}/genesis
      containers:
      - name: quorum
        image: "{{ .Values.images.node }}"
        imagePullPolicy: IfNotPresent
        command: ["sh"]
        args:
        - "-cx"
        - |-
          #!/usr/bin/env sh
          . /scripts/package-manager.sh

          # Define the packages to install
          packages_to_install="curl"
          install_packages "$packages_to_install"

          echo -n {{ .Values.staticnodes | toRawJson  | quote }} > $QUORUM_DATA_DIR/static-nodes.json
          mkdir -p $QUORUM_DATA_DIR/geth
          mkdir -p $QUORUM_DATA_DIR/keystore          
          # touch $qd/passwords.txt
          cp $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }} $QUORUM_DATA_DIR/keystore/
          cp $QUORUM_HOME/crypto/keys/nodekey $QUORUM_DATA_DIR/geth/
          cp $QUORUM_HOME/crypto/keys/passwords.txt $QUORUM_DATA_DIR/password.txt

          rm -f $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }}
          rm -f $QUORUM_HOME/crypto/keys/nodekey
          rm -f $QUORUM_HOME/crypto/keys/passwords.txt

          if [ {{ $.Values.tm.type }} != "none" ]
          then
            until $(curl -k --output /dev/null --silent --head --fail {{ .Values.tessera.url }}/upcheck); do echo 'waiting for transaction manager to start...'; sleep 5; done;
            echo transaction manager is up;
          fi

          args=""
          NODE_STATUS=""
          if [ $CONSENSUS == 'raft' ]; then
            NODE_STATUS={{ .Values.node.status }}
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'additional' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --raftblocktime 300 --http.api admin,eth,debug,miner,net,txpool,personal,web3,quorumExtension,raft --raftjoinexisting {{ .Values.node.peer_id }}";
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'default' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --raftblocktime 300 --http.api admin,eth,debug,miner,net,txpool,personal,web3,quorumExtension,raft";
          fi;
          if [ $CONSENSUS == 'ibft' ]; then
            args=" --istanbul.blockperiod 3 --syncmode full --http.api admin,eth,debug,miner,net,txpool,personal,web3,istanbul,quorumExtension"
          fi;

          LOCK_STATUS={{ .Values.node.lock }}
          if [ $LOCK_STATUS = false ]
          then
            args=" ${args} --unlock 0 "
          fi

          ptm_url="{{ .Values.tessera.clienturl | quote }}"
          if [ -n "$ptm_url" ] && [ "{{ $.Values.tm.type }}" != "none" ]
          then
            ptm_url="--ptm.url $ptm_url"
          else
            ptm_url=""
          fi

          /usr/local/bin/geth \
            --datadir $QUORUM_DATA_DIR \
            $args \
            --identity {{ .Values.node.subject | quote }} \
            --vmdebug \
            --gcmode=archive \
            --nodiscover \
            --nat=none \
            --verbosity 9 \
            --emitcheckpoints \
            --http \
            --http.addr 0.0.0.0 \
            --http.port {{ .Values.node.ports.rpc }} \
            --http.corsdomain "*" \
            --http.vhosts "*" \
            --allow-insecure-unlock \
            --port {{ .Values.node.ports.quorum }} \
            $ptm_url \
            --password $QUORUM_DATA_DIR/password.txt 2>&1 | tee -a $QUORUM_HOME/logs/quorum.log;

        ports:
          - containerPort: {{ .Values.node.ports.rpc }}
          - containerPort: {{ .Values.node.ports.quorum }}
{{- if eq $.Values.node.consensus "raft" }}
          - containerPort: {{ .Values.node.ports.raft }}
{{- end }}
        env:
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
          - name: QUORUM_HOME
            value: {{ .Values.node.mountPath }}
          - name: QHOME
            value: {{ .Values.node.mountPath }}
          - name: TM_HOME
            value: {{ .Values.node.mountPath }}/tm/
          - name: CONSENSUS
            value: {{ .Values.node.consensus }}
        volumeMounts:
        - name: certificates
          mountPath: {{ .Values.node.mountPath }}/crypto/
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
        - name: package-manager
          mountPath: /scripts/package-manager.sh
          subPath: package-manager.sh
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.node.name }}-pv
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
