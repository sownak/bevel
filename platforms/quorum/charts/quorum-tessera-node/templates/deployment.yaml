##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.node.name }}-tessera
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  name: {{ .Values.node.name }}-tessera
spec:
  serviceName: {{ .Values.node.name }}-tessera
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consortiumchain
      service.rpc: {{ .Values.node.name }}-tessera
      app.kubernetes.io/name: {{ .Values.node.name }}-tessera
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: consortiumchain
        name: {{ .Values.node.name }}-tessera
        service.rpc: {{ .Values.node.name }}-tessera
        app.kubernetes.io/name: {{ .Values.node.name }}-tessera
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.node.name }}-tessera
      imagePullSecrets:
          - name: {{ .Values.node.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: mysql
          emptyDir:
            medium: Memory
        - name: tessera-config
          configMap:
            name: tessera-config-{{ .Values.node.name }}
            items:
              - key: tessera-config.json.tmpl
                path: tessera-config.json.tmpl
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
        - name: package-manager
          configMap:
            name: package-manager
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: MOUNT_PATH
          value: "/secret"
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash
          . /scripts/bevel-vault.sh
          
          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"
          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"

          username=$(echo ${VAULT_SECRET} | jq -r '.["db_user"]')
          password=$(echo ${VAULT_SECRET} | jq -r '.["db_password"]')

          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}
          echo "${username}" > ${OUTPUT_PATH}/username
          echo "${password}" > ${OUTPUT_PATH}/password

          # Calling a function to retrieve secrets for keystore
          vaultBevelFunc "readJson" "${VAULT_SECRET_PREFIX}/certs"
          keystore=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
          echo "${keystore}" > ${OUTPUT_PATH}/keystore
          base64 -d ${OUTPUT_PATH}/keystore > ${OUTPUT_PATH}/server-keystore

          echo "Done checking for certificates in vault"
        volumeMounts:
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      - name: mysql-init
        image: {{ .Values.images.busybox }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-cx"
        - |-
          #!/bin/bash

          echo "getting username and password from vault"          
          var=$(cat /secret/keys/password)         
          cat << EOF > /docker-entrypoint-initdb.d/createTables.sql
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'demouser';
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'root';
          CREATE TABLE IF NOT EXISTS ENCRYPTED_TRANSACTION (ENCODED_PAYLOAD BLOB NOT NULL, PAYLOAD_CODEC VARCHAR(50), HASH VARBINARY(100) NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (HASH));
          CREATE TABLE IF NOT EXISTS ENCRYPTED_RAW_TRANSACTION (ENCRYPTED_KEY BLOB NOT NULL, ENCRYPTED_PAYLOAD BLOB NOT NULL, NONCE BLOB NOT NULL, SENDER BLOB NOT NULL, TIMESTAMP BIGINT, HASH VARBINARY(100) NOT NULL, PRIMARY KEY (HASH));
          CREATE TABLE PRIVACY_GROUP(ID VARBINARY(100) NOT NULL, LOOKUP_ID BLOB NOT NULL, DATA BLOB NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (ID));
          CREATE TABLE ST_TRANSACTION(ID BIGINT(19) NOT NULL, PAYLOAD_CODEC VARCHAR(50), HASH VARCHAR(100) NOT NULL, PAYLOAD BLOB, PRIVACY_MODE BIGINT(10), TIMESTAMP BIGINT(19), VALIDATION_STAGE BIGINT(19), PRIMARY KEY (ID));
          CREATE TABLE ST_AFFECTED_TRANSACTION(ID BIGINT(19) NOT NULL, AFFECTED_HASH VARCHAR(100) NOT NULL, TXN_ID BIGINT(19) NOT NULL, CONSTRAINT FK_ST_AFFECTED_TRANSACTION_TXN_ID FOREIGN KEY (TXN_ID) REFERENCES ST_TRANSACTION(ID), PRIMARY KEY (ID));
          ALTER TABLE ST_TRANSACTION ADD INDEX ST_TRANSACTION_VALSTG (VALIDATION_STAGE);
          EOF
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
      containers:
      - name: mysql-db
        image: {{ .Values.images.mysql }}
        imagePullPolicy: IfNotPresent
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          value: ""
        - name: MYSQL_DATABASE
          value: "{{ .Values.node.dbname }}"
        - name: MYSQL_USER
          value: "{{ .Values.node.mysqluser }}"
        - name: MYSQL_PASSWORD
          value: /secret/keys/password
        ports:
          - containerPort: {{ .Values.node.ports.db }}
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
        - name: {{ .Values.node.name }}-mysql
          mountPath: "/var/lib/mysql"
          subPath: mysql
      - name: tessera
        image: {{ .Values.images.tessera }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash", "-c"]
        args:
          - |-
            #!/usr/bin/env bash

            . /scripts/bevel-vault.sh
            . /scripts/package-manager.sh

            # Define the packages to install
            packages_to_install="jq curl"
            install_packages "$packages_to_install"

            mkdir -p $TESSERA_HOME/logs;
            mkdir -p $TESSERA_HOME/tm;
            DDIR=$TESSERA_HOME/tm;
            PASSWORD=$(cat $TESSERA_HOME/crypto/keys/password);
            mv $TESSERA_HOME/crypto/keys/server-keystore $TESSERA_HOME/tm/

            # Calling a function to retrieve the vault token.
            vaultBevelFunc "init"
            export HASHICORP_TOKEN="$VAULT_TOKEN"
                    
            printenv;
            # mysql connector required for mysql tessera DB 
            wget -q http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.25.tar.gz;
            tar -xf mysql-connector-java-8.0.25.tar.gz;
            cp /mysql-connector-java-8.0.25/mysql-connector-java-8.0.25.jar /tessera/lib/;
            CONFIG_TMPL=$(cat ${TESSERA_HOME}/tessera-config.json.tmpl);
            echo $CONFIG_TMPL >  ${DDIR}/tessera-config-with-hosts.json;
            cat ${DDIR}/tessera-config-with-hosts.json;
            
            /tessera/bin/tessera --configfile ${DDIR}/tessera-config-with-hosts.json -o jdbc.password=$PASSWORD;
        ports:
          - containerPort: {{ .Values.node.ports.tm }}
        env:
          - name: TESSERA_HOME
            value: {{ .Values.node.mountPath }}
          - name: QHOME
            value: {{ .Values.node.mountPath }}
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}          
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: VAULT_TYPE
            value: "{{ $.Values.vault.type }}"
        volumeMounts:
          - name: certificates
            mountPath: {{ .Values.node.mountPath }}/crypto/
          - name: {{ .Values.node.name }}-tessera-pv
            mountPath: {{ .Values.node.mountPath }}
          - name: tessera-config
            mountPath: {{ .Values.node.mountPath }}/tessera-config.json.tmpl
            subPath: tessera-config.json.tmpl
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.node.name }}-tessera-pv
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
    - metadata:
        name: {{ .Values.node.name }}-mysql     
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}    
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.dbstorage }}
