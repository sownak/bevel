##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  labels:
    app: "{{ $.Values.metadata.name }}"
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      securityContext:
        fsGroup: 1000      
      initContainers:
      - name: crypto-init
        image: {{ $.Values.image.initContainerName }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: CERTS_SECRET_PREFIX
          value: {{ .Values.vault.certsecretprefix }}          
        - name: MOUNT_PATH
          value: "/certcheck"
        - name: PEER_NAME
          value: "{{ $.Values.peer.name }}"
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"                                         
        volumeMounts:
        - name: certcheck
          mountPath: /certcheck
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env bash
          . /scripts/bevel-vault.sh
          mkdir -p ${MOUNT_PATH}

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum"

          checknodekey=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
          # Create an empty file to indicate that the secret is absent or present in vault.
          if [ -z "$checknodekey" ] || [ "$checknodekey" == "null" ]
          then
            echo "Certificates absent in vault. Ignore error warning."
            touch ${MOUNT_PATH}/absent.txt
          else
            echo "Certificates present in vault."
            touch ${MOUNT_PATH}/present.txt
          fi

          echo "Done checking for certificates in vault."
      containers:
      - name: generate-cryptomaterials
        image: {{ $.Values.image.node }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        volumeMounts:
          - name: certcheck
            mountPath: /certcheck
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: MOUNT_PATH
          value: "/certcheck"
        - name: CERTS_SECRET_PREFIX
          value: {{ .Values.vault.certsecretprefix }}                         
        - name: GETH_PASSPHRASE
          value: "{{ $.Values.peer.gethPassphrase }}"
        - name: PEER_NAME
          value: "{{ $.Values.peer.name }}"
        - name: DB_USER
          value: "demouser"
        - name: DB_PASSWORD
          value: "password"
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"                                
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          . /scripts/package-manager.sh

          # Define the packages to install
          packages_to_install="jq curl openssl"
          install_packages "$packages_to_install"

          . /scripts/bevel-vault.sh
          
          # Skip secret creation if "present.txt" exists in /certcheck/
          if [ -e /certcheck/present.txt ]
          then
            echo "Certificates already present in the vault. Skipping."
            exit 0
          fi
          
          echo "Fetching nodekey from vault"
          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"
          # Calling a function to retrieve secrets from Vault only if they exist.
          vaultBevelFunc "readJson" "${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum"
          nodekey=$(echo ${VAULT_SECRET} | jq -r '.["nodekey"]')
          
          echo "If nodekey does not exist, we generate one and will be saved in vault"
          if [ -z "$nodekey" ] || [ "$nodekey" == "null" ]
            then
              bootnode -genkey nodevalue
              nodekey=$(cat nodevalue)
            else
              echo "Nodekey already exists"
          fi
          echo "Creating files and certs"
          echo $nodekey >> nodekey
          echo $GETH_PASSPHRASE >> password
          bootnode --nodekey nodekey --writeaddress >> enode
          geth account new --datadir ${PEER_NAME} --password password
          cp ${PEER_NAME}/keystore/* keystorefile
          tr -d "\n\r" < keystorefile > newchange
          openssl base64 -in newchange -out base64_keystore
          echo "
            {
              \"data\": {
              \"nodekey\": \"$nodekey\",
              \"keystore\": \"$(cat base64_keystore)\",
              \"db_password\": \"${DB_PASSWORD}\",
              \"geth_password\": \"${GETH_PASSPHRASE}\",
              \"db_user\": \"${DB_USER}\"
            }}" > finalJSON.json

          # Calling a function to write secrets to the Vault.
          vaultBevelFunc 'write' "${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum" 'finalJSON.json'

          # get nodekey from vault
          # Calling a function to retrieve secrets from Vault.
          vaultBevelFunc "readJson" "${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum"
          nodekey=$(echo ${VAULT_SECRET} | jq -r '.["nodekey"]' 2>&1)
          # get keystore from vault
          keystore=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]' 2>&1)

          if [ "$nodekey" == "null" ] || [ "$cat base64_keystore" == "null" ] || [ "$nodekey" == "parse error"* ] || [ "$cat base64_keystore" == "parse error"* ]
          then
            echo "certificates write or read fail"
            sleep {{ $.Values.sleepTime  }}
            if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
            then
              echo "Retry attempted $COUNTER times, certificates have not been saved"
              exit 1
            fi
            COUNTER=`expr "$COUNTER" + 1`
          fi

      volumes:
        - name: certcheck
          emptyDir:
            medium: Memory
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
        - name: package-manager
          configMap:
            name: package-manager
