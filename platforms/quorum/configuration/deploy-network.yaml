##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook deploys a DLT network on existing Kubernetes clusters
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook deploy-network.yaml -e "@./network.yaml"
############################################################################################
# Please ensure that the ../../shared/configuration playbooks have been run using the same network.yaml
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  # delete build directory
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # create namespace
  - name: "Create namespace"
    include_role:
      name: create/namespace
    vars:
      component_ns: "{{ item.name | lower }}-quo"
      organisation: "{{ item.name | lower }}"
      kubernetes: "{{ item.k8s }}"
      gitops: "{{ item.gitops }}"
    loop: "{{ network['organizations'] }}"
  
  # Create Storageclass
  - name: Create Storage Class
    include_role:
      name: "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/setup/storageclass"
    vars:
      org_name: "{{ org.name | lower }}"
      cloudProvider: "{{ org.cloud_provider | lower }}"
      sc_name: "{{ org_name }}-{{ cloudProvider }}-storageclass"
      region: "{{ org.k8s.region | default('eu-west-1') }}"
      git_dir: "{{ org.gitops.release_dir }}"
      kubernetes: "{{ org.k8s }}"
      charts_dir: "platforms/shared/charts"
      platform_suffix: "quo"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Setup script for Vault and OS Package Manager
  - name: "Setup script for Vault and OS Package Manager"
    include_role:
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/scripts"
    vars:
      namespace: "{{ org.name | lower }}-quo"
      network_type: "{{ network.type | lower }}"
      kubernetes: "{{ org.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Setup Vault-Kubernetes accesses and Regcred for docker registry
  - name: "Setup vault"
    include_role:
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/vault_kubernetes"
    vars:
      policy_type: "quorum"
      name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-quo"
      component_name: "{{ org.name | lower }}-vaultk8s-job"
      component_auth: "quorum{{ org.name | lower }}"
      component_type: "organization"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Generate Ambassador certificate for nodes
  - name: "Create ambassador certificates for Nodes"
    include_role:
      name: create/certificates/ambassador
    vars:
      gitops: "{{ org.gitops }}"
      component_auth: "quorum{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-quo"
      charts_dir: "{{ org.gitops.chart_source }}"
      component_name: "{{ org.name | lower }}-ambassador-certs"
      kubernetes: "{{ org.k8s }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
      vault: "{{ org.vault }}"
      peers: "{{ org.services.peers }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Generate the crypto material for quorum network based on RAFT consensus and store it in vault
  - name: "Generate crypto material for RAFT consensus"
    include_role:
      name: create/crypto/raft
    vars:
      gitops: "{{ org.gitops }}"
      org_name: "{{ org.name }}"
      component_name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-quo"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
      vault: "{{ org.vault }}"
      peers: "{{ org.services.peers }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      kubernetes: "{{ org.k8s }}"
    loop: "{{ network['organizations'] }}"
    when: network.config.consensus == 'raft'
    loop_control:
      loop_var: org

  # Build istanbul binary and place it in the bin directory
  - name: "Setup istanbul-tools"
    include_role:
      name: setup/istanbul
    loop: "{{ network['organizations'] }}"
    when: network.config.consensus == 'ibft'

  # Generate the genesis.json and nodekey/enode for all orgs of the network
  - name: "Generate genesis and nodekey/enode for the network"
    include_role:
      name: create/genesis_nodekey
    when: network.config.consensus == 'ibft'

  # Generate the crypto material for quorum network based on ibft consensus and store it in vault
  - name: "Generate crypto material for IBFT consensus"
    include_role:
      name: create/crypto/ibft
    vars:
      component_name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-quo"
      vault: "{{ org.vault }}"
      org_name: "{{ org.name }}"
      kubernetes: "{{ org.k8s }}"
      peers: "{{ org.services.peers }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
      gitops: "{{ org.gitops }}"
      charts_dir: "{{ org.gitops.chart_source }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: network.config.consensus == 'ibft'

  # Generate the crypto materials for tessera tm
  - name: "Generate crypto for the Tessera transaction manager"
    include_role:
      name: create/crypto/tessera
    vars:
      build_path: "{{ playbook_dir }}/build"
      component_ns: "{{ org.name | lower }}-quo"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      org_name: "{{ org.name }}"
      peers: "{{ org.services.peers }}"
      gitops: "{{ org.gitops }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when:
      - network.config.transaction_manager == 'tessera'

  # Deploy Tessera transaction manager node
  - name: "Deploy Tessera Transaction Manager"
    include_role:
      name: create/tessera
    vars:
      consensus: "{{ network.config.consensus }}"
      component_ns: "{{ org.name | lower }}-quo"
      name: "{{ org.name | lower }}"
      peers: "{{ org.services.peers }}"
      sc_name: "{{ name }}-{{ org.cloud_provider | lower }}-storageclass"
      external_url: "{{ org.external_url_suffix }}"
      vault: "{{ org.vault }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: network.config.transaction_manager == 'tessera'

  # Deploy member nodes
  - name: "Deploy member nodes"
    include_role:
      name: create/member_node
    vars:
      build_path: "./build"
      kubernetes: "{{ org.k8s }}"
      consensus: "{{ network.config.consensus }}"
      component_ns: "{{ org.name | lower }}-quo"
      name: "{{ org.name | lower }}"
      peers: "{{ org.services.peers }}"
      sc_name: "{{ name }}-{{ org.cloud_provider | lower }}-storageclass"
      external_url: "{{ org.external_url_suffix }}"
      vault: "{{ org.vault }}"
      git_url: "{{ org.gitops.git_url }}"
      git_branch: "{{ org.gitops.branch }}"
      docker_url: "{{ network.docker.url }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ org.name | lower }}"
      geth_data: "{{ network.config.bootnode | default('null') }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Deploy validator nodes
  - name: "Deploy validator nodes"
    include_role:
      name: create/validator_node
    vars:
      build_path: "./build"
      kubernetes: "{{ org.k8s }}"
      consensus: "{{ network.config.consensus }}"
      component_ns: "{{ org.name | lower }}-quo"
      name: "{{ org.name | lower }}"
      peers: "{{ org.services.peers }}"
      sc_name: "{{ name }}-{{ org.cloud_provider | lower }}-storageclass"
      external_url: "{{ org.external_url_suffix }}"
      vault: "{{ org.vault }}"
      git_url: "{{ org.gitops.git_url }}"
      git_branch: "{{ org.gitops.branch }}"
      docker_url: "{{ network.docker.url }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ org.name | lower }}"
      geth_data: "{{ network.config.bootnode | default('null') }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  #These variables can be overriden from the command line
  vars:
    install_os: "linux"           # Default to linux OS
    install_arch:  "amd64"        # Default to amd64 architecture
    bin_install_dir:  "~/bin"     # Default to /bin install directory for binaries
    add_new_org: false            # 'add_new_org' flag, defaults to false when not defined.
