##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Set enode_data_list to empty
- name: Set enode_validator_list to []
  set_fact:
    enode_validator_list: []

# Set enode_data_list to empty
- name: Set new_validator_nodes to []
  set_fact:
    new_validator_nodes: [] 

# Creates the build directory
- name: Create build directory if it does not exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ playbook_dir }}/build"

# Generates key pair and nodeaddress for all orgs of the network
- name: "Generate crypto for the network nodes"
  include_role:
    name: create/crypto/node
  vars:
    build_path: "{{ playbook_dir }}/build"
    organisation: "{{ org.name | lower }}"
    organisation_ns: "{{ org.name | lower }}-bes"
    kubernetes: "{{ org.k8s }}"
    vault: "{{ org.vault }}"
    charts_dir: "{{ org.gitops.chart_source }}"
    gitops: "{{ org.gitops }}"
    values_dir: "{{ playbook_dir }}/../../../{{org.gitops.release_dir}}/{{ org.name | lower }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
      loop_var: org
  when: org.type == 'validator'

# Fetch (org, node) pairs for the newest validators in the network
- name: Fetching data of validator nodes in the network from network.yaml
  include_tasks: node_data.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: org.type == 'validator'

# Checks the crypto material in the vault
- name: Get crypto from vault
  include_tasks: check_vault.yaml
  vars:
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This file stores the address of the validator nodes
- name: Touch file to store information for validators
  file:
    path: "{{ build_path }}/validatorinfo"
    state: touch
  when:  
    - (network.crypto_only is defined and network.crypto_only == false) or (network.crypto_only is undefined)

# This file used by besu binary to generate the extra data information
- name: Touch toEncode.json file
  file:
    path: "{{ build_path }}/toEncode.json"
    state: touch
  when:  
    - (network.crypto_only is defined and network.crypto_only == false) or (network.crypto_only is undefined)

# Create the validator address array
- name: Get node data
  shell: |
    echo "\"$(cat {{ build_path }}/crypto/{{item[1].org}}/{{item[1].node}}/data/nodeAddress)\"" >> {{ build_path }}/validatorinfo
  with_indexed_items: "{{ enode_validator_list }}"
  when:  
    - item[1].type == "validator"
    - (network.crypto_only is defined and network.crypto_only == false) or (network.crypto_only is undefined)
    
# Converts the validator info to json format
- name: Convert validatorInfo to json format
  shell: |
    cat {{ build_path }}/validatorinfo | paste -sd "," -| awk '{print "["$0"]"}'> {{ build_path }}/toEncode.json

# Displays the JSON file content
- name: Display the JSON file content
  shell: |
    cat {{ build_path }}/toEncode.json
  register: result
    
# Saves the JSON data to a variable for future use
- name: Save the data to a Variable as a Fact
  set_fact:
    validator_address: "{{ result.stdout }}"

# Contains the voting from the existing validators for the new validator to be added
- name: Voting for the addition of newest validator
  include_tasks: validator_vote.yaml
  vars:
    besu_nodes: "{{ network.config.besu_nodes }}"
    validator_addr: "{{ item.0 }}"
    validator_name: "{{ item.1 }}"
  with_together:
    - "{{ validator_address }}"
    - "{{ enode_validator_list }}"
