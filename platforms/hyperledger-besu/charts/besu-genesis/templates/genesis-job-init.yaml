---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "besu-genesis.name" . }}-init
  labels:
    app.kubernetes.io/name: besu-genesis-job
    app.kubernetes.io/component: genesis-job
    app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: besu-genesis-job
        app.kubernetes.io/component: genesis-job
        app.kubernetes.io/part-of: {{ include "besu-genesis.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName}}
      restartPolicy: OnFailure
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.genesisUtils }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: generated-config
              mountPath: /generated-config
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
          env:
          - name: VAULT_ADDR
            value: "{{ .Values.global.vault.address }}"
          - name: VAULT_SECRET_ENGINE
            value: "{{ .Values.global.vault.secretEngine }}"
          - name: VAULT_SECRET_PREFIX
            value: "{{ .Values.global.vault.secretPrefix }}"
          - name: KUBERNETES_AUTH_PATH
            value: "{{ .Values.global.vault.authPath }}"
          - name: VAULT_APP_ROLE
            value: "{{ .Values.global.vault.role }}"
          - name: VAULT_TYPE
            value: "{{ .Values.global.vault.type }}"
          command:
            - /bin/bash
            - -c
          args:
            - |

{{- if and (eq .Values.global.vault.type "hashicorp") (not .Values.global.cluster.cloudNativeServices) }}
              . /scripts/bevel-vault.sh
              echo "Getting vault Token..."
              vaultBevelFunc "init"
              function safeWriteSecret {
                key=$1
                fpath=$2
                NODE_ADDRESS=$(cat ${fpath}/address)
                NODE_KEY=$(cat ${fpath}/nodekey)
                NODE_KEY_PUB=$(cat ${fpath}/nodekey.pub)
                accountPrivateKey=$(cat ${fpath}/accountPrivateKey)
                accountPassword=$(cat ${fpath}/accountPassword)
                accountKeystore=$(cat ${fpath}/accountKeystore | base64 -w 0)
                accountAddress=$(cat ${fpath}/accountAddress)

                # create a JSON file for the data related to node crypto
                echo "
                {
                  \"data\":
                    {
                      \"nodeAddress\": \"${NODE_ADDRESS}\",
                      \"nodekey\": \"${NODE_KEY}\",
                      \"nodekey_pub\": \"${NODE_KEY_PUB}\",
                      \"accountPrivateKey\": \"${accountPrivateKey}\",
                      \"accountPassword\": \"${accountPassword}\",
                      \"accountKeystore_base64\": \"${accountKeystore}\",
                      \"accountAddress\": \"${accountAddress}\"
                    }
                }" > payload.json
                # Add vault write code
                vaultBevelFunc 'write' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${key}-keys" 'payload.json'
                rm payload.json
              }
{{- else }}
              
              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=nodekey=${fpath}/nodekey --from-file=nodekey.pub=${fpath}/nodekey.pub --from-file=enode=${fpath}/nodekey.pub --from-file=accountPrivate.key=${fpath}/accountPrivateKey --from-file=accountPassword=${fpath}/accountPassword --from-file=accountKeystore=${fpath}/accountKeystore --from-file=accountAdddress=${fpath}/accountAddress
              }

{{- end }}

              function safeWriteBesuPeersConfigmap {
                FOLDER_PATH=$1
                kubectl get configmap --namespace {{ .Release.Namespace }} besu-peers
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-peers --from-file=static-nodes.json=$FOLDER_PATH/static-nodes.json
                fi
              }

              function safeWriteGenesisConfigmap {
                FOLDER_PATH=$1
                kubectl get configmap --namespace {{ .Release.Namespace }} besu-genesis
                if [ $? -ne 0 ]; then
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-genesis --from-file=genesis.json=$FOLDER_PATH/besu/genesis.json
                fi
              }
              {{- if .Values.settings.secondaryGenesis }}
              echo "Secondary Genesis, config maps are created from local files."

              {{- else }}
              echo "Primary Genesis, Creating config ..."
              FOLDER_PATH=$(quorum-genesis-tool --consensus {{ .Values.rawGenesisConfig.genesis.config.algorithm.consensus }} {{ if .Values.rawGenesisConfig.blockchain.nodes.generate }} --validators {{ .Values.rawGenesisConfig.blockchain.nodes.count }} {{ else }} --validators 0 {{ end }} --members 0 --bootnodes 0 --chainID {{ .Values.rawGenesisConfig.genesis.config.chainId }} --blockperiod {{ .Values.rawGenesisConfig.genesis.config.algorithm.blockperiodseconds }} --epochLength {{ .Values.rawGenesisConfig.genesis.config.algorithm.epochlength }} --requestTimeout {{ .Values.rawGenesisConfig.genesis.config.algorithm.requesttimeoutseconds }} --difficulty {{ .Values.rawGenesisConfig.genesis.difficulty }} --gasLimit {{ .Values.rawGenesisConfig.genesis.gasLimit }} --coinbase {{ .Values.rawGenesisConfig.genesis.coinbase }} {{ if .Values.rawGenesisConfig.blockchain.accountPassword }} --accountPassword {{ .Values.rawGenesisConfig.blockchain.accountPassword }} {{ end }} --quickstartDevAccounts {{ .Values.rawGenesisConfig.genesis.includeQuickStartAccounts }} --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo "Creating bootnodes configmap in k8s ..."
              echo "[]" > /tmp/besu-bootnodes
              kubectl create configmap --namespace {{ .Release.Namespace }} besu-bootnodes --from-file=bootnodes=/tmp/besu-bootnodes

              echo $FOLDER_PATH
              echo "Creating genesis configmap in k8s ..."
              safeWriteGenesisConfigmap $FOLDER_PATH

              # create the static-nodes with proper dns names for the quorum nodes
              echo "[" > $FOLDER_PATH/static-nodes.json
              echo "Creating validator secrets in k8s ..."
              i=1
              for f in $(find $FOLDER_PATH -type d -iname "validator*" -exec basename {} \;); do
                if [ -d $FOLDER_PATH/${f} ]; then
                  echo $f
                  echo "Creating keys in vault for validator-${i} ..."

{{- if and (ne .Values.global.cluster.provider "local") (.Values.global.cluster.cloudNativeServices) }}

                  safeWriteSecret besu-node-validator-${i}-nodekey $FOLDER_PATH/${f}/nodekey
                  safeWriteSecret besu-node-validator-${i}-nodekeypub $FOLDER_PATH/${f}/nodekey.pub 
                  safeWriteSecret besu-node-validator-${i}-enode $FOLDER_PATH/${f}/nodekey.pub 
                  safeWriteSecret besu-node-validator-${i}-address $FOLDER_PATH/${f}/address
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address

                  safeWriteSecret besu-node-validator-${i}-accountPrivateKey $FOLDER_PATH/${f}/accountPrivateKey
                  safeWriteSecret besu-node-validator-${i}-accountPassword $FOLDER_PATH/${f}/accountPassword
                  safeWriteSecret besu-node-validator-${i}-accountKeystore $FOLDER_PATH/${f}/accountKeystore 
                  safeWriteSecret besu-node-validator-${i}-accountAddress $FOLDER_PATH/${f}/accountAddress 

{{- else }}
                  
                  safeWriteSecret besu-node-validator-${i} "$FOLDER_PATH/${f}"
                  kubectl create configmap --namespace {{ .Release.Namespace }} besu-node-validator-${i}-address --from-file=address=$FOLDER_PATH/${f}/address

{{- end }}
                  # add to the static-nodes
                  pubkey=$(cat $FOLDER_PATH/${f}/nodekey.pub )
                  echo ",\"enode://$pubkey@besu-node-validator-$i.{{ .Release.Namespace }}:30303?discport=0\"" >> $FOLDER_PATH/static-nodes.json

                  i=$((i+1))
                fi
              done

              echo "]" >> $FOLDER_PATH/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' $FOLDER_PATH/static-nodes.json
              safeWriteBesuPeersConfigmap $FOLDER_PATH
              {{- end }}
              echo "Completed ..."
          
      volumes:
      - name: generated-config
        emptyDir: {}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
          defaultMode: 0777
