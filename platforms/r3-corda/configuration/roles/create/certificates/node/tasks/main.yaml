########################################################################################
# This role download certificates from nms and loads into vault
########################################################################################

########################################################################################
# This task ensures directory existance, if not creates a new one
---
- name: "Ensure build dir exists"
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "{{ node_certs }}"
    check: "ensure_dir"

- name: Check if truststore already created
  shell: |
    vault kv get -field=network-map-truststore {{ component_name }}/certs/networkmaptruststore
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: truststore_result
  ignore_errors: yes

########################################################################################
# This task downloads the certificates from NMS
- name: "Downloads certs from nms"
  get_url:
    url: "{{ nms_url }}/network-map/truststore"
    dest: "{{ node_certs }}/network-map-truststore.jks"
    validate_certs: no
  when: truststore_result.failed == True

########################################################################################
# This task loads the certificates to vault
- name: "Write networkmaptruststore to vault"
  shell: |
    vault kv put {{ component_name }}/certs/networkmaptruststore network-map-truststore="$(cat {{ node_certs }}/network-map-truststore.jks | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: truststore_result.failed == True

- name: Check if certificates already created
  shell: |
    vault kv get -field=nodekeystore.jks {{ component_name }}/certs/customnodekeystore
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: certs_result
  ignore_errors: yes

- name: Generate node certs
  shell: |
    cd {{ node_certs }}
    openssl genrsa -out {{ component_name }}.key 3072
    openssl req -new -x509 -key {{ component_name }}.key -out {{ component_name }}.cer -days 365 -subj '/{{ cert_subject }}'
    openssl dgst -sha256 -sign {{ component_name }}.key {{ component_name }}.cer | base64 | cat {{ component_name }}.cer 
    openssl pkcs12 -export -in {{ component_name }}.cer -inkey {{ component_name }}.key -out testkeystore.p12 -passin pass:'cordacadevpass' -passout pass:'cordacadevpass'
    keytool -importkeystore -srckeystore testkeystore.p12 -srcstoretype pkcs12 -srcstorepass cordacadevpass -destkeystore nodekeystore.jks -deststorepass cordacadevpass -deststoretype JKS
  when: certs_result.failed == True

- name: "Write certificates to vault"
  shell: |
    vault kv put {{ component_name }}/certs/customnodekeystore nodekeystore.jks="$(cat {{ node_certs }}/nodekeystore.jks | base64)"
    vault kv put {{ component_name }}/certs {{ component_name }}.cer="$(cat {{ node_certs }}/{{ component_name }}.cer | base64)" {{ component_name }}.key="$(cat {{ node_certs }}/{{ component_name }}.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: certs_result.failed == True

- name: Check if doorman certs already created
  shell: |
    vault kv get -field=doorman.crt {{ component_name }}/certs/doorman
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: doorman_result
  ignore_errors: yes

- name: "Write certificates to vault"
  shell: |
    vault kv put {{ component_name }}/certs/doorman doorman.crt="$(cat {{ doorman_cert_file }} | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: doorman_result.failed == True and doorman_cert_file != ''

- name: Check if networkmap certs already created
  shell: |
    vault kv get -field=networkmap.crt {{ component_name }}/certs/networkmap 
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: networkmap_result
  ignore_errors: yes

- name: "Write certificates to vault"
  shell: |
    vault kv put {{ component_name }}/certs/networkmap networkmap.crt="$(cat {{ nms_cert_file }} | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: networkmap_result.failed == True

- name: "Write credentials to vault"
  shell: |
    vault kv put {{ component_name }}/credentials/database sa="newh2pass" {{ component_name }}User1="xyz1234" {{ component_name }}User2="xyz1236"
    vault kv put {{ component_name }}/credentials/rpcusers {{ component_name }}operations="usera" {{ component_name }}operations1="usera" {{ component_name }}operations2="usera" {{ component_name }}admin="usera"
    vault kv put {{ component_name }}/credentials/vaultroottoken rootToken="{{ vault.root_token }}"
    vault kv put {{ component_name }}/credentials/keystore keyStorePassword="newpass" trustStorePassword="newpass" defaultTrustStorePassword="trustpass" defaultKeyStorePassword="cordacadevpass" sslkeyStorePassword="sslpass" ssltrustStorePassword="sslpass"
    vault kv put {{ component_name }}/credentials/networkmappassword sa="admin"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"

- name: "Write cordapps credentials to vault"
  shell: |
    vault kv put {{ component_name }}/credentials/cordapps repo_username="{{ cordapps_details.username }}" repo_password="{{ cordapps_details.password }}"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: cordapps_details != "" 

- name: Create Ambassador certificates
  include_role: 
    name: "create/certificates/ambassador"