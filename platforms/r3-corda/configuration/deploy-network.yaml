##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

##############################################################################################
# Playbook to create deployment files for namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
##############################################################################################

- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:    
  # Delete build directory
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # create namespace
  - name: "Create namespace"
    include_role: 
      name: create/namespace 
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: network['type'] == 'corda'

  # Create Storageclass
  - name: Create StorageClass
    include_role:
      name: "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/setup/storageclass"
    vars:
      org_name: "{{ org.name | lower }}"
      cloudProvider: "{{ org.cloud_provider | lower }}"
      sc_name: "{{ org_name }}-{{ cloudProvider }}-storageclass" 
      region: "{{ org.k8s.region | default('eu-west-1') }}"
      git_dir: "{{ org.gitops.release_dir }}"
      kubernetes: "{{ org.k8s }}"
      gitops: "{{ org.gitops }}"
      charts_dir: "platforms/shared/charts"
      platform_suffix: "ns" 
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: network['type'] == 'corda'

  # Deploy Doorman node
  - name: Deploy Doorman service node
    include_role:
      name: setup/doorman
    vars:
      services: "{{ item.services }}"
      organisation: "{{ item.name | lower }}"
      sc_name: "{{ organisation }}-{{ item.cloud_provider | lower }}-storageclass"
      component_ns: "{{ item.name | lower }}-ns"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      gitops: "{{ item.gitops }}"     
    loop: "{{ network['organizations'] }}"
    when: network['type'] == 'corda' and item.type.find('doorman') != -1

  # Deploy NMS node
  - name: Deploy Networkmap service node
    include_role:
      name: setup/nms      
    vars:
      services: "{{ item.services }}"
      organisation: "{{ item.name | lower }}"
      sc_name: "{{ organisation }}-{{ item.cloud_provider | lower }}-storageclass"
      component_ns: "{{ item.name | lower }}-ns"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      gitops: "{{ item.gitops }}"
    loop: "{{ network['organizations'] }}"
    when: network['type'] == 'corda' and item.type.find('nms') != -1
  
  # Wait for network services to respond  
  - name: Check that network services uri are reachable
    uri:
      url: "{{ item.uri }}"
      validate_certs: no
    register: this
    until: this.status == 200 or this.status == 401
    loop: "{{ network['network_services'] }}"
    retries: "{{ network.env.retry_count}}"
    delay: 50
    ignore_errors: yes
    when: network.env.proxy != 'none'

  # Deploy notaries
  - name: 'Deploy notary'
    include_role:
      name: setup/notary
    vars:
      services: "{{ item.services }}"
      node: "{{ item.services.notary }}"
      organisation: "{{ item.name | lower }}"
      sc_name: "{{ organisation }}-{{ item.cloud_provider | lower }}-storageclass"
      component_ns: "{{ item.name | lower }}-ns"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      gitops: "{{ item.gitops }}" 
      cordapps: "{{ item.cordapps | default() }}"
    loop: "{{ network['organizations'] }}"
    when: network['type'] == 'corda' and item.type.find('notary') != -1

  # Deploy all other nodes
  - name: 'Deploy nodes'
    include_role:
      name: setup/node
    vars:
      organisation: "{{ item.name | lower }}"
      sc_name: "{{ organisation }}-{{ item.cloud_provider | lower }}-storageclass"
      component_ns: "{{ item.name | lower }}-ns"
      services: "{{ item.services }}"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      cordapps: "{{ item.cordapps | default() }}"
      gitops: "{{ item.gitops }}" 
    loop: "{{ network['organizations'] }}"  
    when: network['type'] == 'corda' and item.type == 'node'
